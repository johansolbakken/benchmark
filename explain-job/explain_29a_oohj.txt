Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 imdbload with input size: 1686 bytes
EXPLAIN
-> Nested loop inner join  (cost=102957..102957 rows=233e-9 height=1) (actual time=164..164 rows=0 loops=1)
    -> Nested loop inner join  (cost=102955..102955 rows=2.33e-6 height=1) (actual time=164..164 rows=0 loops=1)
        -> Nested loop inner join  (cost=102953..102953 rows=23.3e-6 height=1) (actual time=164..164 rows=0 loops=1)
            -> Nested loop inner join  (cost=102948..102948 rows=38.4e-6 height=1) (actual time=164..164 rows=0 loops=1)
                -> Nested loop inner join  (cost=102944..102944 rows=384e-6 height=1) (actual time=164..164 rows=0 loops=1)
                    -> Nested loop inner join  (cost=102939..102939 rows=0.0346 height=1) (actual time=95.6..164 rows=160 loops=1)
                        -> Nested loop inner join  (cost=102911..102911 rows=0.0275 height=1) (actual time=94.8..95.2 rows=80 loops=1)
                            -> Nested loop inner join  (cost=102908..102908 rows=0.129 height=1) (actual time=94.8..94.9 rows=55 loops=1)
                                -> Sort: ci.id  (cost=102905..102905 rows=1.29 height=1) (actual time=94.7..94.8 rows=190 loops=1)
                                    -> Nested loop inner join  (cost=79740..102904 rows=1.29 height=1) (actual time=51.8..94.6 rows=190 loops=1)
                                        -> Nested loop inner join  (cost=102835..102835 rows=0.293 height=1) (actual time=51.8..91.7 rows=5 loops=1)
                                            -> Nested loop inner join  (cost=64936..102811 rows=1.58 height=1) (actual time=51.7..89.9 rows=5 loops=1)
                                                -> Nested loop inner join  (cost=6833..102662 rows=15 height=1) (actual time=51.7..89.8 rows=1 loops=1)
                                                    -> Inner hash join (cct2.id = cc.status_id) (fill_ratio=1.09673e-05)  (cost=78.1..96567 rows=1354 height=1) (actual time=1.3..47.8 rows=17879 loops=1)
                                                        -> Inner hash join (cct1.id = cc.subject_id) (fill_ratio=4.76837e-06)  (cost=10.3..93570 rows=13536 height=1) (actual time=1.18..42.1 rows=85941 loops=1)
                                                            -> Table scan on cc  (cost=0.47..63625 rows=135359 height=1) (actual time=1.17..30.9 rows=135086 loops=1)
                                                            -> Hash
                                                                -> Filter: (cct1.kind = 'cast')  (cost=2.77..2.77 rows=0.4 height=1) (actual time=0.00331..0.00455 rows=1 loops=1)
                                                                    -> Table scan on cct1  (cost=0.636..2.54 rows=4 height=1) (actual time=0.00277..0.00374 rows=4 loops=1)
                                                        -> Hash
                                                            -> Filter: (cct2.kind = 'complete+verified')  (cost=2.77..2.77 rows=0.4 height=1) (actual time=0.0363..0.0383 rows=1 loops=1)
                                                                -> Table scan on cct2  (cost=0.636..2.54 rows=4 height=1) (actual time=0.0323..0.0349 rows=4 loops=1)
                                                    -> Filter: ((t.production_year between 2000 and 2010) and (t.title = 'Shrek 2'))  (cost=4.5..4.5 rows=0.0111 height=1) (actual time=0.00228..0.00228 rows=55.9e-6 loops=17879)
                                                        -> Single-row index lookup on t using PRIMARY (id = cc.movie_id)  (cost=4.44..4.44 rows=1 height=1) (actual time=0.00214..0.00215 rows=1 loops=17879)
                                                -> Nested loop inner join  (cost=9.89..9.89 rows=0.105 height=1) (actual time=0.0221..0.12 rows=5 loops=1)
                                                    -> Index lookup on mc using movie_id_movie_companies (movie_id = t.id)  (cost=5.71..6.01 rows=1.05 height=1) (actual time=0.014..0.0597 rows=22 loops=1)
                                                    -> Filter: (cn.country_code = '[us]')  (cost=3.68..3.68 rows=0.1 height=1) (actual time=0.00265..0.00266 rows=0.227 loops=22)
                                                        -> Single-row index lookup on cn using PRIMARY (id = mc.company_id)  (cost=3.62..3.62 rows=1 height=1) (actual time=0.00246..0.00247 rows=1 loops=22)
                                            -> Nested loop inner join  (cost=15.3..15.3 rows=0.185 height=1) (actual time=0.072..0.363 rows=1 loops=5)
                                                -> Index lookup on mk using movie_id_movie_keyword (movie_id = mc.movie_id)  (cost=4.92..9.11 rows=1.85 height=1) (actual time=0.00876..0.183 rows=108 loops=5)
                                                -> Filter: (k.keyword = 'computer-animation')  (cost=3.32..3.32 rows=0.1 height=1) (actual time=0.00159..0.00159 rows=0.00926 loops=540)
                                                    -> Single-row index lookup on k using PRIMARY (id = mk.keyword_id)  (cost=3.27..3.27 rows=1 height=1) (actual time=0.00146..0.00147 rows=1 loops=540)
                                        -> Filter: (ci.note in ('(voice)','(voice) (uncredited)','(voice: English version)'))  (cost=15.7..69 rows=4.4 height=1) (actual time=0.00626..0.579 rows=38 loops=5)
                                            -> Index lookup on ci using movie_id_cast_info (movie_id = cc.movie_id)  (cost=4.64..68.2 rows=14.7 height=1) (actual time=0.00566..0.539 rows=229 loops=5)
                                -> Filter: (rt.`role` = 'actress')  (cost=2.3..2.3 rows=0.1 height=1) (actual time=263e-6..277e-6 rows=0.289 loops=190)
                                    -> Single-row index lookup on rt using PRIMARY (id = ci.role_id)  (cost=2.25..2.25 rows=1 height=1) (actual time=110e-6..124e-6 rows=1 loops=190)
                            -> Index lookup on an using person_id_aka_name (person_id = ci.person_id)  (cost=3..3 rows=0.213 height=1) (actual time=0.00291..0.00553 rows=1.45 loops=55)
                        -> Filter: ((mi.info like 'Japan:%200%') or (mi.info like 'USA:%200%'))  (cost=22.7..28.6 rows=1.26 height=1) (actual time=0.739..0.854 rows=2 loops=80)
                            -> Index lookup on mi using movie_id_movie_info (movie_id = cc.movie_id)  (cost=4.71..28.2 rows=6 height=1) (actual time=0.00349..0.803 rows=457 loops=80)
                    -> Filter: ((n.gender = 'f') and (n.`name` like '%An%'))  (cost=4.2..4.2 rows=0.0111 height=1) (actual time=491e-6..491e-6 rows=0 loops=160)
                        -> Single-row index lookup on n using PRIMARY (id = an.person_id)  (cost=4.14..4.14 rows=1 height=1) (actual time=290e-6..304e-6 rows=1 loops=160)
                -> Filter: (chn.`name` = 'Queen')  (cost=4.17..4.17 rows=0.1 height=1) (never executed)
                    -> Single-row index lookup on chn using PRIMARY (id = ci.person_role_id)  (cost=4.12..4.12 rows=1 height=1) (never executed)
            -> Index lookup on pi using person_id_person_info (person_id = an.person_id)  (cost=4.85..4.85 rows=0.606 height=1) (never executed)
        -> Filter: (it3.info = 'trivia')  (cost=2.3..2.3 rows=0.1 height=1) (never executed)
            -> Single-row index lookup on it3 using PRIMARY (id = pi.info_type_id)  (cost=2.25..2.25 rows=1 height=1) (never executed)
    -> Filter: (it.info = 'release dates')  (cost=2.3..2.3 rows=0.1 height=1) (never executed)
        -> Single-row index lookup on it using PRIMARY (id = mi.info_type_id)  (cost=2.25..2.25 rows=1 height=1) (never executed)
