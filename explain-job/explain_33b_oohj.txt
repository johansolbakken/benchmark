Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 imdbload with input size: 1193 bytes
EXPLAIN
-> Nested loop inner join  (cost=24885..24885 rows=397e-6 height=1) (actual time=19.2..19.2 rows=4 loops=1)
    -> Nested loop inner join  (cost=24881..24881 rows=397e-6 height=1) (actual time=19.2..19.2 rows=4 loops=1)
        -> Nested loop inner join  (cost=24875..24875 rows=377e-6 height=1) (actual time=19.2..19.2 rows=1 loops=1)
            -> Nested loop inner join  (cost=24873..24873 rows=0.00377 height=1) (actual time=19.1..19.2 rows=3 loops=1)
                -> Nested loop inner join  (cost=24869..24869 rows=0.0377 height=1) (actual time=19.1..19.2 rows=12 loops=1)
                    -> Nested loop inner join  (cost=24867..24867 rows=0.377 height=1) (actual time=19.1..19.2 rows=12 loops=1)
                        -> Sort: t1.title  (cost=24861..24861 rows=0.358 height=1) (actual time=19.1..19.1 rows=6 loops=1)
                            -> Nested loop inner join  (cost=24861..24861 rows=0.358 height=1) (actual time=1.53..19.1 rows=6 loops=1)
                                -> Nested loop inner join  (cost=24856..24856 rows=0.358 height=1) (actual time=1.52..19.1 rows=6 loops=1)
                                    -> Inner hash join (kt2.id = t2.kind_id) (fill_ratio=7.15256e-06)  (cost=24852..24852 rows=0.634 height=1) (actual time=1.51..19.1 rows=2 loops=1)
                                        -> Nested loop inner join  (cost=3997..24846 rows=6.34 height=1) (actual time=1.49..19 rows=2 loops=1)
                                            -> Inner hash join (it2.id = mi_idx2.info_type_id) (fill_ratio=5.72205e-06)  (cost=481..24561 rows=63.4 height=1) (actual time=1.48..18.9 rows=34 loops=1)
                                                -> Nested loop inner join  (cost=38.3..24325 rows=634 height=1) (actual time=0.322..18.7 rows=2928 loops=1)
                                                    -> Nested loop inner join  (cost=2.96..9999 rows=3373 height=1) (actual time=0.309..3.16 rows=2315 loops=1)
                                                        -> Filter: (lt.link like '%follow%')  (cost=6.24..12.5 rows=2 height=1) (actual time=0.00557..0.0128 rows=2 loops=1)
                                                            -> Table scan on lt  (cost=0.636..11.4 rows=18 height=1) (actual time=0.00474..0.00865 rows=18 loops=1)
                                                        -> Index lookup on ml using link_type_id_movie_link (link_type_id = lt.id)  (cost=2.96..4994 rows=1687 height=1) (actual time=0.299..1.54 rows=1158 loops=2)
                                                    -> Filter: (mi_idx2.info < '3.0')  (cost=4.25..4.25 rows=0.188 height=1) (actual time=0.00314..0.00662 rows=1.26 loops=2315)
                                                        -> Index lookup on mi_idx2 using movie_id_movie_info_idx (movie_id = ml.linked_movie_id)  (cost=4.21..4.21 rows=0.564 height=1) (actual time=0.00299..0.00637 rows=2.68 loops=2315)
                                                -> Hash
                                                    -> Filter: (it2.info = 'rating')  (cost=6.94..78.4 rows=11.3 height=1) (actual time=0.0256..0.0273 rows=1 loops=1)
                                                        -> Table scan on it2  (cost=0.636..71.9 rows=113 height=1) (actual time=0.00575..0.0221 rows=113 loops=1)
                                            -> Filter: (t2.production_year = 2007)  (cost=4.5..4.5 rows=0.1 height=1) (actual time=0.00349..0.00349 rows=0.0588 loops=34)
                                                -> Single-row index lookup on t2 using PRIMARY (id = ml.linked_movie_id)  (cost=4.44..4.44 rows=1 height=1) (actual time=0.00332..0.00333 rows=1 loops=34)
                                        -> Hash
                                            -> Filter: (kt2.kind = 'tv series')  (cost=3.82..3.82 rows=0.7 height=1) (actual time=0.0178..0.0204 rows=1 loops=1)
                                                -> Table scan on kt2  (cost=0.488..3.42 rows=7 height=1) (actual time=0.0154..0.0183 rows=7 loops=1)
                                    -> Index lookup on mi_idx1 using movie_id_movie_info_idx (movie_id = ml.movie_id)  (cost=4.21..4.21 rows=0.564 height=1) (actual time=0.00452..0.0088 rows=3 loops=2)
                                -> Single-row index lookup on t1 using PRIMARY (id = ml.movie_id)  (cost=4.44..4.44 rows=1 height=1) (actual time=0.00145..0.00147 rows=1 loops=6)
                        -> Index lookup on mc1 using movie_id_movie_companies (movie_id = mi_idx1.movie_id)  (cost=5.71..6.01 rows=1.05 height=1) (actual time=0.00431..0.00704 rows=2 loops=6)
                    -> Filter: (kt1.kind = 'tv series')  (cost=2.16..2.16 rows=0.1 height=1) (actual time=551e-6..596e-6 rows=1 loops=12)
                        -> Single-row index lookup on kt1 using PRIMARY (id = t1.kind_id)  (cost=2.11..2.11 rows=1 height=1) (actual time=337e-6..351e-6 rows=1 loops=12)
                -> Filter: (cn1.country_code = '[nl]')  (cost=3.68..3.68 rows=0.1 height=1) (actual time=0.00222..0.00224 rows=0.25 loops=12)
                    -> Single-row index lookup on cn1 using PRIMARY (id = mc1.company_id)  (cost=3.62..3.62 rows=1 height=1) (actual time=0.00206..0.00207 rows=1 loops=12)
            -> Filter: (it1.info = 'rating')  (cost=2.3..2.3 rows=0.1 height=1) (actual time=0.00174..0.00176 rows=0.333 loops=3)
                -> Single-row index lookup on it1 using PRIMARY (id = mi_idx1.info_type_id)  (cost=2.25..2.25 rows=1 height=1) (actual time=0.00154..0.00156 rows=1 loops=3)
        -> Index lookup on mc2 using movie_id_movie_companies (movie_id = mi_idx2.movie_id)  (cost=5.71..6.01 rows=1.05 height=1) (actual time=0.00602..0.0137 rows=4 loops=1)
    -> Single-row index lookup on cn2 using PRIMARY (id = mc2.company_id)  (cost=3.62..3.62 rows=1 height=1) (actual time=0.00233..0.00234 rows=1 loops=4)
