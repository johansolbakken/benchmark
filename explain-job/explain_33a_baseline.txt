Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 imdbload with input size: 1211 bytes
EXPLAIN
-> Nested loop inner join  (cost=61892..61892 rows=0.00119 height=1) (actual time=25.7..25.8 rows=8 loops=1)
    -> Nested loop inner join  (cost=61888..61888 rows=0.00119 height=1) (actual time=25.7..25.7 rows=8 loops=1)
        -> Nested loop inner join  (cost=61882..61882 rows=0.00113 height=1) (actual time=25.7..25.7 rows=2 loops=1)
            -> Nested loop inner join  (cost=61880..61880 rows=0.0113 height=1) (actual time=25.7..25.7 rows=6 loops=1)
                -> Sort: t1.title  (cost=61878..61878 rows=0.113 height=1) (actual time=25.7..25.7 rows=6 loops=1)
                    -> Nested loop inner join  (cost=61877..61877 rows=0.113 height=1) (actual time=3.76..25.7 rows=6 loops=1)
                        -> Nested loop inner join  (cost=61873..61873 rows=0.113 height=1) (actual time=3.75..25.7 rows=6 loops=1)
                            -> Nested loop inner join  (cost=54726..61869 rows=1.13 height=1) (actual time=3.74..25.6 rows=42 loops=1)
                                -> Inner hash join (kt2.id = t2.kind_id) (fill_ratio=7.15256e-06)  (cost=57607..61862 rows=1.07 height=1) (actual time=3.73..25.5 rows=15 loops=1)
                                    -> Nested loop inner join  (cost=5864..61855 rows=10.7 height=1) (actual time=3.7..25.4 rows=15 loops=1)
                                        -> Nested loop inner join  (cost=3356..61775 rows=19 height=1) (actual time=3.7..25.4 rows=6 loops=1)
                                            -> Inner hash join (it2.id = mi_idx2.info_type_id) (fill_ratio=5.72205e-06)  (cost=471..61004 rows=171 height=1) (actual time=3.69..25.3 rows=34 loops=1)
                                                -> Nested loop inner join  (cost=55.9..60530 rows=1713 height=1) (actual time=0.456..25 rows=2928 loops=1)
                                                    -> Inner hash join (lt.id = ml.link_type_id) (fill_ratio=1.43051e-05)  (cost=23..21846 rows=9108 height=1) (actual time=0.437..8.65 rows=2315 loops=1)
                                                        -> Table scan on ml  (cost=0.47..14271 rows=30360 height=1) (actual time=0.419..6.91 rows=29997 loops=1)
                                                        -> Hash
                                                            -> Filter: (lt.link in ('sequel','follows','followed by'))  (cost=2.31..12.5 rows=5.4 height=1) (actual time=0.00621..0.0103 rows=2 loops=1)
                                                                -> Table scan on lt  (cost=0.636..11.4 rows=18 height=1) (actual time=0.00545..0.00741 rows=18 loops=1)
                                                    -> Filter: (mi_idx2.info < '3.0')  (cost=4.25..4.25 rows=0.188 height=1) (actual time=0.00329..0.00697 rows=1.26 loops=2315)
                                                        -> Index lookup on mi_idx2 using movie_id_movie_info_idx (movie_id = ml.linked_movie_id)  (cost=4.21..4.21 rows=0.564 height=1) (actual time=0.00312..0.00667 rows=2.68 loops=2315)
                                                -> Hash
                                                    -> Filter: (it2.info = 'rating')  (cost=6.94..78.4 rows=11.3 height=1) (actual time=0.0261..0.0279 rows=1 loops=1)
                                                        -> Table scan on it2  (cost=0.636..71.9 rows=113 height=1) (actual time=0.00541..0.0224 rows=113 loops=1)
                                            -> Filter: (t2.production_year between 2005 and 2008)  (cost=4.5..4.5 rows=0.111 height=1) (actual time=0.00362..0.00363 rows=0.176 loops=34)
                                                -> Single-row index lookup on t2 using PRIMARY (id = ml.linked_movie_id)  (cost=4.44..4.44 rows=1 height=1) (actual time=0.00345..0.00346 rows=1 loops=34)
                                        -> Index lookup on mi_idx1 using movie_id_movie_info_idx (movie_id = ml.movie_id)  (cost=4.21..4.21 rows=0.564 height=1) (actual time=0.0036..0.00727 rows=2.5 loops=6)
                                    -> Hash
                                        -> Filter: (kt2.kind = 'tv series')  (cost=3.82..3.82 rows=0.7 height=1) (actual time=0.0178..0.0204 rows=1 loops=1)
                                            -> Table scan on kt2  (cost=0.488..3.42 rows=7 height=1) (actual time=0.0159..0.0184 rows=7 loops=1)
                                -> Index lookup on mc1 using movie_id_movie_companies (movie_id = mi_idx1.movie_id)  (cost=5.71..6.01 rows=1.05 height=1) (actual time=0.00406..0.00832 rows=2.8 loops=15)
                            -> Filter: (cn1.country_code = '[us]')  (cost=3.68..3.68 rows=0.1 height=1) (actual time=0.0022..0.00221 rows=0.143 loops=42)
                                -> Single-row index lookup on cn1 using PRIMARY (id = mc1.company_id)  (cost=3.62..3.62 rows=1 height=1) (actual time=0.00202..0.00204 rows=1 loops=42)
                        -> Single-row index lookup on t1 using PRIMARY (id = mc1.movie_id)  (cost=4.44..4.44 rows=1 height=1) (actual time=947e-6..968e-6 rows=1 loops=6)
                -> Filter: (kt1.kind = 'tv series')  (cost=2.16..2.16 rows=0.1 height=1) (actual time=788e-6..837e-6 rows=1 loops=6)
                    -> Single-row index lookup on kt1 using PRIMARY (id = t1.kind_id)  (cost=2.11..2.11 rows=1 height=1) (actual time=579e-6..595e-6 rows=1 loops=6)
            -> Filter: (it1.info = 'rating')  (cost=2.3..2.3 rows=0.1 height=1) (actual time=982e-6..0.001 rows=0.333 loops=6)
                -> Single-row index lookup on it1 using PRIMARY (id = mi_idx1.info_type_id)  (cost=2.25..2.25 rows=1 height=1) (actual time=822e-6..839e-6 rows=1 loops=6)
        -> Index lookup on mc2 using movie_id_movie_companies (movie_id = mi_idx2.movie_id)  (cost=5.71..6.01 rows=1.05 height=1) (actual time=0.00547..0.0129 rows=4 loops=2)
    -> Single-row index lookup on cn2 using PRIMARY (id = mc2.company_id)  (cost=3.62..3.62 rows=1 height=1) (actual time=0.00241..0.00242 rows=1 loops=8)
