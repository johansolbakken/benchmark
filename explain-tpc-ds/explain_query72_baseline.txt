Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 1308 bytes
EXPLAIN
-> Sort: total_cnt DESC, item.i_item_desc, warehouse.w_warehouse_name, d1.d_week_seq, limit input to 100 row(s) per chunk  (cost=11548..11548 rows=0.86 height=1) (actual time=0.0326..0.0326 rows=0 loops=1)
    -> Stream results  (cost=11548..11548 rows=0.86 height=1) (actual time=0.0311..0.0311 rows=0 loops=1)
        -> Group aggregate: sum((case when (promotion.p_promo_sk is null) then 1 else 0 end)), sum((case when (promotion.p_promo_sk is not null) then 1 else 0 end)), count(0)  (cost=11547..11547 rows=0.86 height=1) (actual time=0.0305..0.0305 rows=0 loops=1)
            -> Nested loop left join  (cost=11547..11547 rows=0.86 height=1) (actual time=0.03..0.03 rows=0 loops=1)
                -> Sort: item.i_item_desc, warehouse.w_warehouse_name, d1.d_week_seq  (cost=11544..11544 rows=0.86 height=1) (actual time=0.0297..0.0297 rows=0 loops=1)
                    -> Nested loop inner join  (cost=11543..11543 rows=0.86 height=1) (actual time=0.0273..0.0273 rows=0 loops=1)
                        -> Inner hash join (catalog_sales.cs_ship_date_sk = d3.d_date_sk), extra conditions: (cast(d3.d_date as double) > cast((d1.d_date + 5) as double)) (fill_ratio=0)  (cost=11539..11539 rows=0.86 height=1) (actual time=0.0271..0.0271 rows=0 loops=1)
                            -> Table scan on d3  (cost=0.857..0.857 rows=1 height=1) (actual time=0.0152..0.0152 rows=1 loops=1)
                            -> Hash
                                -> Nested loop left join  (cost=11537..11537 rows=0.86 height=1) (actual time=0.00842..0.00842 rows=0 loops=1)
                                    -> Filter: (inventory.inv_quantity_on_hand < catalog_sales.cs_quantity)  (cost=11533..11533 rows=0.86 height=1) (actual time=0.00793..0.00793 rows=0 loops=1)
                                        -> Nested loop inner join  (cost=4479..11533 rows=2.58 height=1) (actual time=0.00779..0.00779 rows=0 loops=1)
                                            -> Inner hash join (catalog_sales.cs_bill_hdemo_sk = household_demographics.hd_demo_sk) (fill_ratio=0)  (cost=12.7..12.7 rows=100e-6 height=1) (actual time=0.00763..0.00763 rows=0 loops=1)
                                                -> Filter: (household_demographics.hd_buy_potential = '1001-5000')  (cost=0.565..0.565 rows=0.1 height=1) (actual time=0.00655..0.00655 rows=0 loops=1)
                                                    -> Table scan on household_demographics  (cost=0.507..0.507 rows=1 height=1) (actual time=0.00289..0.00503 rows=1 loops=1)
                                                -> Hash
                                                    -> Inner hash join (catalog_sales.cs_bill_cdemo_sk = customer_demographics.cd_demo_sk) (fill_ratio=0)  (cost=12.1..12.1 rows=0.001 height=1) (never executed)
                                                        -> Filter: (customer_demographics.cd_marital_status = 'M')  (cost=0.73..0.73 rows=0.1 height=1) (never executed)
                                                            -> Table scan on customer_demographics  (cost=0.673..0.673 rows=1 height=1) (never executed)
                                                        -> Hash
                                                            -> Inner hash join (catalog_sales.cs_sold_date_sk = d1.d_date_sk) (fill_ratio=0)  (cost=11.3..11.3 rows=0.01 height=1) (never executed)
                                                                -> Nested loop inner join  (cost=8.86..8.86 rows=1 height=1) (never executed)
                                                                    -> Table scan on catalog_sales  (cost=0.931..0.931 rows=1 height=1) (never executed)
                                                                    -> Single-row index lookup on item using PRIMARY (i_item_sk = catalog_sales.cs_item_sk)  (cost=7.93..7.93 rows=1 height=1) (never executed)
                                                                -> Hash
                                                                    -> Inner hash join (d1.d_week_seq = d2.d_week_seq) (fill_ratio=0)  (cost=2.22..2.22 rows=0.01 height=1) (never executed)
                                                                        -> Table scan on d2  (cost=0.857..0.857 rows=1 height=1) (never executed)
                                                                        -> Hash
                                                                            -> Filter: (d1.d_year = 2001)  (cost=1.01..1.01 rows=0.1 height=1) (never executed)
                                                                                -> Table scan on d1  (cost=0.949..0.949 rows=1 height=1) (never executed)
                                            -> Index lookup on inventory using PRIMARY (inv_date_sk = d2.d_date_sk, inv_item_sk = item.i_item_sk)  (cost=0.447..11520 rows=25792 height=1) (never executed)
                                    -> Single-row covering index lookup on promotion using PRIMARY (p_promo_sk = catalog_sales.cs_promo_sk)  (cost=3.66..3.66 rows=1 height=1) (never executed)
                        -> Single-row index lookup on warehouse using PRIMARY (w_warehouse_sk = inventory.inv_warehouse_sk)  (cost=4.21..4.21 rows=1 height=1) (never executed)
                -> Single-row covering index lookup on catalog_returns using PRIMARY (cr_item_sk = catalog_sales.cs_item_sk, cr_order_number = catalog_sales.cs_order_number)  (cost=3.31..3.31 rows=1 height=1) (never executed)
