Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 843 bytes
EXPLAIN
-> Sort: cnt, a.state, limit input to 100 row(s) per chunk  (cost=908870..908870 rows=87.1 height=1) (actual time=0.169..0.169 rows=0 loops=1)
    -> Filter: (`count(0)` >= 10)  (cost=908803..908822 rows=87.1 height=1) (actual time=0.167..0.167 rows=0 loops=1)
        -> Table scan on <temporary>  (cost=908803..908817 rows=87.1 height=1) (actual time=0.166..0.166 rows=0 loops=1)
            -> Aggregate using temporary table  (cost=908803..908803 rows=87.1 height=1) (actual time=0.166..0.166 rows=0 loops=1)
                -> Inner hash join (c.c_customer_sk = s.ss_customer_sk) (fill_ratio=0)  (cost=97590..869274 rows=51955 height=1) (actual time=0.165..0.165 rows=0 loops=1)
                    -> Inner hash join (s.ss_sold_date_sk = d.d_date_sk) (fill_ratio=0)  (cost=16.9..753744 rows=51955 height=1) (actual time=0.163..0.163 rows=0 loops=1)
                        -> Nested loop inner join  (cost=1.23..638818 rows=519549 height=1) (actual time=0.148..0.148 rows=1 loops=1)
                            -> Filter: (i.i_current_price > (1.2 * (select #3)))  (cost=4170..347451 rows=83.3 height=1) (actual time=0.133..0.133 rows=1 loops=1)
                                -> Table scan on i  (cost=5.51..1378 rows=250 height=1) (actual time=0.0235..0.0235 rows=1 loops=1)
                                -> Select #3 (subquery in condition; dependent)
                                    -> Aggregate: avg(j.i_current_price)  (cost=1384..1384 rows=1 height=1) (actual time=0.102..0.102 rows=1 loops=1)
                                        -> Filter: (j.i_category = i.i_category)  (cost=55.2..1381 rows=25 height=1) (actual time=0.00896..0.0969 rows=29 loops=1)
                                            -> Table scan on j  (cost=5.47..1366 rows=250 height=1) (actual time=0.00797..0.0719 rows=250 loops=1)
                            -> Index lookup on s using PRIMARY (ss_item_sk = i.i_item_sk)  (cost=0.561..3497 rows=6235 height=1) (actual time=0.0139..0.0139 rows=1 loops=1)
                        -> Hash
                            -> Filter: (d.d_month_seq = (select #2))  (cost=2.23..2.23 rows=0.1 height=1) (actual time=0.013..0.013 rows=0 loops=1)
                                -> Table scan on d  (cost=0.857..0.857 rows=1 height=1) (actual time=0.00291..0.00329 rows=1 loops=1)
                                -> Select #2 (subquery in condition; run only once)
                                    -> Sort with duplicate removal: date_dim.d_month_seq  (cost=1.31..1.31 rows=0.01 height=1) (actual time=0.0059..0.0059 rows=0 loops=1)
                                        -> Filter: ((date_dim.d_year = 2000) and (date_dim.d_moy = 2))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.00355..0.00355 rows=0 loops=1)
                                            -> Table scan on date_dim  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00248..0.00312 rows=1 loops=1)
                    -> Hash
                        -> Inner hash join (a.ca_address_sk = c.c_current_addr_sk) (fill_ratio=0)  (cost=31833..71324 rows=17526 height=1) (never executed)
                            -> Table scan on c  (cost=1.91..33437 rows=17526 height=1) (never executed)
                            -> Hash
                                -> Table scan on a  (cost=2.7..20475 rows=7582 height=1) (never executed)
