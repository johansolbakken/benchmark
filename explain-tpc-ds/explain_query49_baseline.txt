Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 4218 bytes
EXPLAIN
-> Sort: t.`channel`, t.return_rank, t.currency_rank, t.item, limit input to 100 row(s) per chunk  (cost=189369..189369 rows=100 height=1) (actual time=0.0492..0.0492 rows=0 loops=1)
    -> Table scan on t  (cost=189293..189311 rows=107 height=1) (actual time=0.0473..0.0473 rows=0 loops=1)
        -> Union all materialize  (cost=189293..189293 rows=107 height=1) (actual time=0.0472..0.0472 rows=0 loops=1)
            -> Filter: ((web.return_rank <= 10) or (web.currency_rank <= 10))  (cost=12.4..12.4 rows=68.6e-6 height=1) (actual time=0.0277..0.0277 rows=0 loops=1)
                -> Table scan on web  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.0276..0.0276 rows=0 loops=1)
                    -> Materialize  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.0274..0.0274 rows=0 loops=1)
                        -> Window aggregate: rank() OVER (ORDER BY in_web.currency_ratio )   (cost=9.36..9.36 rows=123e-6 height=1) (actual time=0.0261..0.0261 rows=0 loops=1)
                            -> Sort: in_web.currency_ratio  (cost=9.36..9.36 rows=123e-6 height=1) (actual time=0.0259..0.0259 rows=0 loops=1)
                                -> Window aggregate: rank() OVER (ORDER BY in_web.return_ratio )   (cost=9.01..9.01 rows=123e-6 height=1) (actual time=0.0252..0.0252 rows=0 loops=1)
                                    -> Sort: in_web.return_ratio  (cost=9.01..9.01 rows=123e-6 height=1) (actual time=0.0249..0.0249 rows=0 loops=1)
                                        -> Table scan on in_web  (cost=8.67..8.67 rows=123e-6 height=1) (actual time=0.0241..0.0241 rows=0 loops=1)
                                            -> Materialize  (cost=8.67..8.67 rows=123e-6 height=1) (actual time=0.0236..0.0236 rows=0 loops=1)
                                                -> Group aggregate: sum(coalesce(ws.ws_net_paid,0)), sum(coalesce(wr.wr_return_amt,0)), sum(coalesce(ws.ws_quantity,0)), sum(coalesce(wr.wr_return_quantity,0))  (cost=5.67..5.67 rows=123e-6 height=1) (actual time=0.0225..0.0225 rows=0 loops=1)
                                                    -> Sort: wr.wr_item_sk  (cost=5.67..5.67 rows=123e-6 height=1) (actual time=0.022..0.022 rows=0 loops=1)
                                                        -> Inner hash join (ws.ws_sold_date_sk = d.d_date_sk) (fill_ratio=0)  (cost=5.32..5.32 rows=123e-6 height=1) (actual time=0.0198..0.0198 rows=0 loops=1)
                                                            -> Nested loop inner join  (cost=4.34..4.34 rows=0.0123 height=1) (never executed)
                                                                -> Filter: ((ws.ws_net_profit > 1.00) and (ws.ws_net_paid > 0.00) and (ws.ws_quantity > 0))  (cost=0.922..0.922 rows=0.037 height=1) (never executed)
                                                                    -> Table scan on ws  (cost=0.839..0.839 rows=1 height=1) (never executed)
                                                                -> Filter: (wr.wr_return_amt > 10000.00)  (cost=3.42..3.42 rows=0.333 height=1) (never executed)
                                                                    -> Single-row index lookup on wr using PRIMARY (wr_item_sk = ws.ws_item_sk, wr_order_number = ws.ws_order_number)  (cost=3.36..3.36 rows=1 height=1) (never executed)
                                                            -> Hash
                                                                -> Filter: ((d.d_year = 2000) and (d.d_moy = 12))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.0176..0.0176 rows=0 loops=1)
                                                                    -> Table scan on d  (cost=0.903..0.903 rows=1 height=1) (actual time=0.0143..0.0161 rows=1 loops=1)
            -> Filter: ((catalog.return_rank <= 10) or (catalog.currency_rank <= 10))  (cost=12.4..12.4 rows=68.6e-6 height=1) (actual time=0.00909..0.00909 rows=0 loops=1)
                -> Table scan on catalog  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.00898..0.00898 rows=0 loops=1)
                    -> Materialize  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.00886..0.00886 rows=0 loops=1)
                        -> Window aggregate: rank() OVER (ORDER BY in_cat.currency_ratio )   (cost=9.39..9.39 rows=123e-6 height=1) (actual time=0.00761..0.00761 rows=0 loops=1)
                            -> Sort: in_cat.currency_ratio  (cost=9.39..9.39 rows=123e-6 height=1) (actual time=0.00752..0.00752 rows=0 loops=1)
                                -> Window aggregate: rank() OVER (ORDER BY in_cat.return_ratio )   (cost=9.05..9.05 rows=123e-6 height=1) (actual time=0.00702..0.00702 rows=0 loops=1)
                                    -> Sort: in_cat.return_ratio  (cost=9.05..9.05 rows=123e-6 height=1) (actual time=0.00693..0.00693 rows=0 loops=1)
                                        -> Table scan on in_cat  (cost=8.7..8.7 rows=123e-6 height=1) (actual time=0.00636..0.00636 rows=0 loops=1)
                                            -> Materialize  (cost=8.7..8.7 rows=123e-6 height=1) (actual time=0.00615..0.00615 rows=0 loops=1)
                                                -> Group aggregate: sum(coalesce(cs.cs_net_paid,0)), sum(coalesce(cr.cr_return_amount,0)), sum(coalesce(cs.cs_quantity,0)), sum(coalesce(cr.cr_return_quantity,0))  (cost=5.7..5.7 rows=123e-6 height=1) (actual time=0.00525..0.00525 rows=0 loops=1)
                                                    -> Sort: cr.cr_item_sk  (cost=5.7..5.7 rows=123e-6 height=1) (actual time=0.00512..0.00512 rows=0 loops=1)
                                                        -> Inner hash join (cs.cs_sold_date_sk = d.d_date_sk) (fill_ratio=0)  (cost=5.36..5.36 rows=123e-6 height=1) (actual time=0.00454..0.00454 rows=0 loops=1)
                                                            -> Nested loop inner join  (cost=4.37..4.37 rows=0.0123 height=1) (never executed)
                                                                -> Filter: ((cs.cs_net_profit > 1.00) and (cs.cs_net_paid > 0.00) and (cs.cs_quantity > 0))  (cost=0.922..0.922 rows=0.037 height=1) (never executed)
                                                                    -> Table scan on cs  (cost=0.839..0.839 rows=1 height=1) (never executed)
                                                                -> Filter: (cr.cr_return_amount > 10000.00)  (cost=3.45..3.45 rows=0.333 height=1) (never executed)
                                                                    -> Single-row index lookup on cr using PRIMARY (cr_item_sk = cs.cs_item_sk, cr_order_number = cs.cs_order_number)  (cost=3.39..3.39 rows=1 height=1) (never executed)
                                                            -> Hash
                                                                -> Filter: ((d.d_year = 2000) and (d.d_moy = 12))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.00332..0.00332 rows=0 loops=1)
                                                                    -> Table scan on d  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00262..0.00307 rows=1 loops=1)
            -> Filter: ((store.return_rank <= 10) or (store.currency_rank <= 10))  (cost=189192..189235 rows=107 height=1) (actual time=0.00759..0.00759 rows=0 loops=1)
                -> Table scan on store  (cost=189181..189224 rows=192 height=1) (actual time=0.00749..0.00749 rows=0 loops=1)
                    -> Materialize  (cost=189181..189181 rows=192 height=1) (actual time=0.00735..0.00735 rows=0 loops=1)
                        -> Window aggregate: rank() OVER (ORDER BY in_store.currency_ratio )   (cost=189091..189135 rows=192 height=1) (actual time=0.00635..0.00635 rows=0 loops=1)
                            -> Sort: in_store.currency_ratio  (cost=189091..189091 rows=192 height=1) (actual time=0.00625..0.00625 rows=0 loops=1)
                                -> Window aggregate: rank() OVER (ORDER BY in_store.return_ratio )   (cost=188933..188977 rows=192 height=1) (actual time=0.00579..0.00579 rows=0 loops=1)
                                    -> Sort: in_store.return_ratio  (cost=188933..188933 rows=192 height=1) (actual time=0.00571..0.00571 rows=0 loops=1)
                                        -> Table scan on in_store  (cost=188787..188819 rows=192 height=1) (actual time=0.00524..0.00524 rows=0 loops=1)
                                            -> Materialize  (cost=188787..188787 rows=192 height=1) (actual time=0.00504..0.00504 rows=0 loops=1)
                                                -> Group aggregate: sum(coalesce(sts.ss_net_paid,0)), sum(coalesce(sr.sr_return_amt,0)), sum(coalesce(sts.ss_quantity,0)), sum(coalesce(sr.sr_return_quantity,0))  (cost=188686..188742 rows=192 height=1) (actual time=0.00423..0.00423 rows=0 loops=1)
                                                    -> Sort: sr.sr_item_sk  (cost=188686..188686 rows=12.6 height=1) (actual time=0.0041..0.0041 rows=0 loops=1)
                                                        -> Inner hash join (sts.ss_sold_date_sk = d.d_date_sk) (fill_ratio=0)  (cost=14975..188680 rows=12.6 height=1) (actual time=0.00354..0.00354 rows=0 loops=1)
                                                            -> Nested loop inner join  (cost=150..188416 rows=1260 height=1) (never executed)
                                                                -> Filter: (sr.sr_return_amt > 10000.00)  (cost=2.03..68933 rows=34030 height=1) (never executed)
                                                                    -> Index scan on sr using PRIMARY  (cost=0.618..63051 rows=102101 height=1) (never executed)
                                                                -> Filter: ((sts.ss_net_profit > 1.00) and (sts.ss_net_paid > 0.00) and (sts.ss_quantity > 0))  (cost=3.51..3.51 rows=0.037 height=1) (never executed)
                                                                    -> Single-row index lookup on sts using PRIMARY (ss_item_sk = sr.sr_item_sk, ss_ticket_number = sr.sr_ticket_number)  (cost=3.43..3.43 rows=1 height=1) (never executed)
                                                            -> Hash
                                                                -> Filter: ((d.d_year = 2000) and (d.d_moy = 12))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.0029..0.0029 rows=0 loops=1)
                                                                    -> Table scan on d  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00229..0.00273 rows=1 loops=1)
