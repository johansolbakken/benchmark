Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 4218 bytes
EXPLAIN
-> Sort: t.`channel`, t.return_rank, t.currency_rank, t.item, limit input to 100 row(s) per chunk  (cost=205451..205451 rows=100 height=1) (actual time=0.0393..0.0393 rows=0 loops=1)
    -> Table scan on t  (cost=205378..205394 rows=100 height=1) (actual time=0.0379..0.0379 rows=0 loops=1)
        -> Union all materialize  (cost=205378..205378 rows=100 height=1) (actual time=0.0378..0.0378 rows=0 loops=1)
            -> Filter: ((web.return_rank <= 10) or (web.currency_rank <= 10))  (cost=12.4..12.4 rows=68.6e-6 height=1) (actual time=0.0233..0.0233 rows=0 loops=1)
                -> Table scan on web  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.0232..0.0232 rows=0 loops=1)
                    -> Materialize  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.0231..0.0231 rows=0 loops=1)
                        -> Window aggregate: rank() OVER (ORDER BY in_web.currency_ratio )   (cost=9.36..9.36 rows=123e-6 height=1) (actual time=0.0223..0.0223 rows=0 loops=1)
                            -> Sort: in_web.currency_ratio  (cost=9.36..9.36 rows=123e-6 height=1) (actual time=0.0222..0.0222 rows=0 loops=1)
                                -> Window aggregate: rank() OVER (ORDER BY in_web.return_ratio )   (cost=9.01..9.01 rows=123e-6 height=1) (actual time=0.0219..0.0219 rows=0 loops=1)
                                    -> Sort: in_web.return_ratio  (cost=9.01..9.01 rows=123e-6 height=1) (actual time=0.0218..0.0218 rows=0 loops=1)
                                        -> Table scan on in_web  (cost=8.67..8.67 rows=123e-6 height=1) (actual time=0.0211..0.0211 rows=0 loops=1)
                                            -> Materialize  (cost=8.67..8.67 rows=123e-6 height=1) (actual time=0.0209..0.0209 rows=0 loops=1)
                                                -> Group aggregate: sum(coalesce(ws.ws_net_paid,0)), sum(coalesce(wr.wr_return_amt,0)), sum(coalesce(ws.ws_quantity,0)), sum(coalesce(wr.wr_return_quantity,0))  (cost=5.67..5.67 rows=123e-6 height=1) (actual time=0.0202..0.0202 rows=0 loops=1)
                                                    -> Sort: wr.wr_item_sk  (cost=5.67..5.67 rows=123e-6 height=1) (actual time=0.0199..0.0199 rows=0 loops=1)
                                                        -> Inner hash join (ws.ws_sold_date_sk = d.d_date_sk) (fill_ratio=0)  (cost=5.32..5.32 rows=123e-6 height=1) (actual time=0.0178..0.0178 rows=0 loops=1)
                                                            -> Nested loop inner join  (cost=4.34..4.34 rows=0.0123 height=1) (never executed)
                                                                -> Filter: ((ws.ws_net_profit > 1.00) and (ws.ws_net_paid > 0.00) and (ws.ws_quantity > 0))  (cost=0.922..0.922 rows=0.037 height=1) (never executed)
                                                                    -> Table scan on ws  (cost=0.839..0.839 rows=1 height=1) (never executed)
                                                                -> Filter: (wr.wr_return_amt > 10000.00)  (cost=3.42..3.42 rows=0.333 height=1) (never executed)
                                                                    -> Single-row index lookup on wr using PRIMARY (wr_item_sk = ws.ws_item_sk, wr_order_number = ws.ws_order_number)  (cost=3.36..3.36 rows=1 height=1) (never executed)
                                                            -> Hash
                                                                -> Filter: ((d.d_year = 2000) and (d.d_moy = 12))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.0162..0.0162 rows=0 loops=1)
                                                                    -> Table scan on d  (cost=0.903..0.903 rows=1 height=1) (actual time=0.0133..0.0155 rows=1 loops=1)
            -> Filter: ((catalog.return_rank <= 10) or (catalog.currency_rank <= 10))  (cost=12.4..12.4 rows=68.6e-6 height=1) (actual time=0.00788..0.00788 rows=0 loops=1)
                -> Table scan on catalog  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.00779..0.00779 rows=0 loops=1)
                    -> Materialize  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.00767..0.00767 rows=0 loops=1)
                        -> Window aggregate: rank() OVER (ORDER BY in_cat.currency_ratio )   (cost=9.39..9.39 rows=123e-6 height=1) (actual time=0.00717..0.00717 rows=0 loops=1)
                            -> Sort: in_cat.currency_ratio  (cost=9.39..9.39 rows=123e-6 height=1) (actual time=0.00708..0.00708 rows=0 loops=1)
                                -> Window aggregate: rank() OVER (ORDER BY in_cat.return_ratio )   (cost=9.05..9.05 rows=123e-6 height=1) (actual time=0.00683..0.00683 rows=0 loops=1)
                                    -> Sort: in_cat.return_ratio  (cost=9.05..9.05 rows=123e-6 height=1) (actual time=0.00679..0.00679 rows=0 loops=1)
                                        -> Table scan on in_cat  (cost=8.7..8.7 rows=123e-6 height=1) (actual time=0.00658..0.00658 rows=0 loops=1)
                                            -> Materialize  (cost=8.7..8.7 rows=123e-6 height=1) (actual time=0.00642..0.00642 rows=0 loops=1)
                                                -> Group aggregate: sum(coalesce(cs.cs_net_paid,0)), sum(coalesce(cr.cr_return_amount,0)), sum(coalesce(cs.cs_quantity,0)), sum(coalesce(cr.cr_return_quantity,0))  (cost=5.7..5.7 rows=123e-6 height=1) (actual time=0.00342..0.00342 rows=0 loops=1)
                                                    -> Sort: cr.cr_item_sk  (cost=5.7..5.7 rows=123e-6 height=1) (actual time=0.00333..0.00333 rows=0 loops=1)
                                                        -> Inner hash join (cs.cs_sold_date_sk = d.d_date_sk) (fill_ratio=0)  (cost=5.36..5.36 rows=123e-6 height=1) (actual time=0.00292..0.00292 rows=0 loops=1)
                                                            -> Nested loop inner join  (cost=4.37..4.37 rows=0.0123 height=1) (never executed)
                                                                -> Filter: ((cs.cs_net_profit > 1.00) and (cs.cs_net_paid > 0.00) and (cs.cs_quantity > 0))  (cost=0.922..0.922 rows=0.037 height=1) (never executed)
                                                                    -> Table scan on cs  (cost=0.839..0.839 rows=1 height=1) (never executed)
                                                                -> Filter: (cr.cr_return_amount > 10000.00)  (cost=3.45..3.45 rows=0.333 height=1) (never executed)
                                                                    -> Single-row index lookup on cr using PRIMARY (cr_item_sk = cs.cs_item_sk, cr_order_number = cs.cs_order_number)  (cost=3.39..3.39 rows=1 height=1) (never executed)
                                                            -> Hash
                                                                -> Filter: ((d.d_year = 2000) and (d.d_moy = 12))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.00237..0.00237 rows=0 loops=1)
                                                                    -> Table scan on d  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00183..0.00212 rows=1 loops=1)
            -> Filter: ((store.return_rank <= 10) or (store.currency_rank <= 10))  (cost=205282..205322 rows=100 height=1) (actual time=0.00454..0.00454 rows=0 loops=1)
                -> Table scan on store  (cost=205271..205311 rows=181 height=1) (actual time=0.0045..0.0045 rows=0 loops=1)
                    -> Materialize  (cost=205271..205271 rows=181 height=1) (actual time=0.00437..0.00437 rows=0 loops=1)
                        -> Window aggregate: rank() OVER (ORDER BY in_store.currency_ratio )   (cost=205186..205228 rows=181 height=1) (actual time=0.00371..0.00371 rows=0 loops=1)
                            -> Sort: in_store.currency_ratio  (cost=205186..205186 rows=181 height=1) (actual time=0.00363..0.00363 rows=0 loops=1)
                                -> Window aggregate: rank() OVER (ORDER BY in_store.return_ratio )   (cost=205038..205080 rows=181 height=1) (actual time=0.00346..0.00346 rows=0 loops=1)
                                    -> Sort: in_store.return_ratio  (cost=205038..205038 rows=181 height=1) (actual time=0.00337..0.00337 rows=0 loops=1)
                                        -> Table scan on in_store  (cost=204902..204932 rows=181 height=1) (actual time=0.00312..0.00312 rows=0 loops=1)
                                            -> Materialize  (cost=204902..204902 rows=181 height=1) (actual time=0.00296..0.00296 rows=0 loops=1)
                                                -> Group aggregate: sum(coalesce(sts.ss_net_paid,0)), sum(coalesce(sr.sr_return_amt,0)), sum(coalesce(sts.ss_quantity,0)), sum(coalesce(sr.sr_return_quantity,0))  (cost=204806..204859 rows=181 height=1) (actual time=0.00246..0.00246 rows=0 loops=1)
                                                    -> Sort: sr.sr_item_sk  (cost=204806..204806 rows=13.7 height=1) (actual time=0.00233..0.00233 rows=0 loops=1)
                                                        -> Inner hash join (sts.ss_sold_date_sk = d.d_date_sk) (fill_ratio=0)  (cost=14975..204799 rows=13.7 height=1) (actual time=0.00208..0.00208 rows=0 loops=1)
                                                            -> Nested loop inner join  (cost=150..204513 rows=1368 height=1) (never executed)
                                                                -> Filter: (sr.sr_return_amt > 10000.00)  (cost=2.03..74822 rows=36938 height=1) (never executed)
                                                                    -> Index scan on sr using PRIMARY  (cost=0.618..68438 rows=110824 height=1) (never executed)
                                                                -> Filter: ((sts.ss_net_profit > 1.00) and (sts.ss_net_paid > 0.00) and (sts.ss_quantity > 0))  (cost=3.51..3.51 rows=0.037 height=1) (never executed)
                                                                    -> Single-row index lookup on sts using PRIMARY (ss_item_sk = sr.sr_item_sk, ss_ticket_number = sr.sr_ticket_number)  (cost=3.43..3.43 rows=1 height=1) (never executed)
                                                            -> Hash
                                                                -> Filter: ((d.d_year = 2000) and (d.d_moy = 12))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.00158..0.00158 rows=0 loops=1)
                                                                    -> Table scan on d  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00125..0.00142 rows=1 loops=1)
