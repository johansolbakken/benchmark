Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 1293 bytes
EXPLAIN
-> Sort: lochierarchy DESC, `(case when (lochierarchy = 0) then rollup_group_item(store.s_state,0) end)`, rank_within_parent, limit input to 100 row(s) per chunk  (cost=2.54e+6..2.54e+6 rows=4.12 height=1) (actual time=0.0298..0.0298 rows=1 loops=1)
    -> Window aggregate: rank() OVER (PARTITION BY (grouping(rollup_group_item(store.s_state,0)) + grouping(rollup_group_item(store.s_county,1))),(case when (grouping(rollup_group_item(store.s_county,1)) = 0) then rollup_group_item(store.s_state,0) end) ORDER BY total_sum desc )   (cost=2.54e+6..2.54e+6 rows=4.12 height=1) (actual time=0.0279..0.028 rows=1 loops=1)
        -> Sort: lochierarchy, `(case when (grouping(rollup_group_item(store.s_county,1)) = 0) then rollup_group_item(store.s_state,0) end)`, total_sum DESC  (cost=2.54e+6..2.54e+6 rows=4.12 height=1) (actual time=0.0265..0.0265 rows=1 loops=1)
            -> Stream results  (cost=2.54e+6..2.54e+6 rows=4.12 height=1) (actual time=0.0239..0.0241 rows=1 loops=1)
                -> Group aggregate with rollup: sum(store_sales.ss_net_profit)  (cost=2.54e+6..2.54e+6 rows=4.12 height=1) (actual time=0.0215..0.0217 rows=1 loops=1)
                    -> Sort: store.s_state, store.s_county  (cost=2.54e+6..2.54e+6 rows=7669 height=1) (actual time=0.0208..0.0208 rows=0 loops=1)
                        -> Inner hash join (d1.d_date_sk = store_sales.ss_sold_date_sk) (fill_ratio=0)  (cost=1.34e+6..2.54e+6 rows=7669 height=1) (actual time=0.0189..0.0189 rows=0 loops=1)
                            -> Inner hash join (store.s_store_sk = store_sales.ss_store_sk) (fill_ratio=0)  (cost=1.34e+6..2.52e+6 rows=69027 height=1) (never executed)
                                -> Table scan on store_sales  (cost=0.59..863808 rows=1.46e+6 height=1) (never executed)
                                -> Hash
                                    -> Hash semijoin (FirstMatch) (store.s_state = tmp1.s_state) (fill_ratio=0)  (cost=1.34e+6..1.34e+6 rows=0.0943 height=1) (never executed)
                                        -> Table scan on store  (cost=6.8..13.6 rows=2 height=1) (never executed)
                                        -> Hash
                                            -> Filter: (tmp1.ranking <= 5)  (cost=1.34e+6..1.34e+6 rows=0.471 height=1) (never executed)
                                                -> Table scan on tmp1  (cost=1.34e+6..1.34e+6 rows=1.41 height=1) (never executed)
                                                    -> Materialize  (cost=1.34e+6..1.34e+6 rows=1.41 height=1) (never executed)
                                                        -> Window aggregate: rank() OVER (PARTITION BY store.s_state ORDER BY ```sum(store_sales.ss_net_profit)``` desc )   (cost=1.34e+6..1.34e+6 rows=1.41 height=1) (never executed)
                                                            -> Sort: store.s_state  (cost=1.34e+6..1.34e+6 rows=1.41 height=1) (never executed)
                                                                -> Table scan on <temporary>  (cost=1.34e+6..1.34e+6 rows=1.41 height=1) (never executed)
                                                                    -> Aggregate using temporary table  (cost=1.34e+6..1.34e+6 rows=1.41 height=1) (never executed)
                                                                        -> Inner hash join (store.s_store_sk = store_sales.ss_store_sk) (fill_ratio=0)  (cost=25.2..1.25e+6 rows=162698 height=1) (never executed)
                                                                            -> Inner hash join (date_dim.d_date_sk = store_sales.ss_sold_date_sk) (fill_ratio=0)  (cost=8.4..1.19e+6 rows=162698 height=1) (never executed)
                                                                                -> Table scan on store_sales  (cost=0.59..863808 rows=1.46e+6 height=1) (never executed)
                                                                                -> Hash
                                                                                    -> Filter: (date_dim.d_month_seq between 1212 and <cache>((1212 + 11)))  (cost=0.915..0.915 rows=0.111 height=1) (never executed)
                                                                                        -> Table scan on date_dim  (cost=0.857..0.857 rows=1 height=1) (never executed)
                                                                            -> Hash
                                                                                -> Table scan on store  (cost=6.76..13.5 rows=2 height=1) (never executed)
                            -> Hash
                                -> Filter: (d1.d_month_seq between 1212 and <cache>((1212 + 11)))  (cost=0.915..0.915 rows=0.111 height=1) (actual time=0.0172..0.0172 rows=0 loops=1)
                                    -> Table scan on d1  (cost=0.857..0.857 rows=1 height=1) (actual time=0.0143..0.0163 rows=1 loops=1)
