Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 1989 bytes
EXPLAIN
-> Sort: total_sales, tmp1.i_item_id, limit input to 100 row(s) per chunk  (cost=1.32e+6..1.32e+6 rows=3.87 height=1) (actual time=2.14..2.14 rows=0 loops=1)
    -> Stream results  (cost=1.32e+6..1.32e+6 rows=3.87 height=1) (actual time=2.14..2.14 rows=0 loops=1)
        -> Group aggregate: sum(tmp1.total_sales)  (cost=1.32e+6..1.32e+6 rows=3.87 height=1) (actual time=2.14..2.14 rows=0 loops=1)
            -> Sort: tmp1.i_item_id  (cost=1.32e+6..1.32e+6 rows=15.8 height=1) (actual time=2.14..2.14 rows=0 loops=1)
                -> Table scan on tmp1  (cost=1.32e+6..1.32e+6 rows=15.8 height=1) (actual time=2.14..2.14 rows=0 loops=1)
                    -> Union all materialize  (cost=1.32e+6..1.32e+6 rows=15.8 height=1) (actual time=2.14..2.14 rows=0 loops=1)
                        -> Table scan on ss  (cost=1.31e+6..1.31e+6 rows=15.8 height=1) (actual time=2.12..2.12 rows=0 loops=1)
                            -> Materialize CTE ss  (cost=1.31e+6..1.31e+6 rows=15.8 height=1) (actual time=2.12..2.12 rows=0 loops=1)
                                -> Table scan on <temporary>  (cost=1.31e+6..1.31e+6 rows=15.8 height=1) (actual time=2.12..2.12 rows=0 loops=1)
                                    -> Aggregate using temporary table  (cost=1.31e+6..1.31e+6 rows=15.8 height=1) (actual time=2.12..2.12 rows=0 loops=1)
                                        -> Inner hash join (LooseScan) (item.i_item_id = item.i_item_id) (fill_ratio=0)  (cost=1.31e+6..1.31e+6 rows=1559 height=1) (actual time=2.12..2.12 rows=0 loops=1)
                                            -> Remove duplicates from input grouped on item.i_item_id  (cost=1423..1439 rows=15.8 height=1) (actual time=0.133..0.133 rows=1 loops=1)
                                                -> Sort: item.i_item_id  (cost=1422..1422 rows=75 height=1) (actual time=0.132..0.132 rows=1 loops=1)
                                                    -> Filter: (item.i_color in ('orchid','chiffon','lace'))  (cost=18.4..1381 rows=75 height=1) (actual time=0.0521..0.125 rows=5 loops=1)
                                                        -> Table scan on item  (cost=5.47..1366 rows=250 height=1) (actual time=0.0241..0.0983 rows=250 loops=1)
                                            -> Hash
                                                -> Inner hash join (store_sales.ss_addr_sk = customer_address.ca_address_sk) (fill_ratio=0.00174046)  (cost=1.3e+6..1.31e+6 rows=1559 height=1) (actual time=1.98..1.98 rows=0 loops=1)
                                                    -> Sort: item.i_item_id  (cost=1.28e+6..1.28e+6 rows=15588 height=1) (actual time=0.00782..0.00782 rows=0 loops=1)
                                                        -> Inner hash join (store_sales.ss_sold_date_sk = date_dim.d_date_sk) (fill_ratio=0)  (cost=1599..1.27e+6 rows=15588 height=1) (actual time=0.00634..0.00634 rows=0 loops=1)
                                                            -> Nested loop inner join  (cost=1518..943949 rows=1.56e+6 height=1) (never executed)
                                                                -> Sort: item.i_item_id  (cost=1517..1517 rows=250 height=1) (never executed)
                                                                    -> Table scan on item  (cost=5.47..1366 rows=250 height=1) (never executed)
                                                                -> Index lookup on store_sales using PRIMARY (ss_item_sk = item.i_item_sk)  (cost=0.605..3770 rows=6235 height=1) (never executed)
                                                            -> Hash
                                                                -> Filter: ((date_dim.d_year = 2000) and (date_dim.d_moy = 1))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.00507..0.00507 rows=0 loops=1)
                                                                    -> Table scan on date_dim  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00386..0.00434 rows=1 loops=1)
                                                    -> Hash
                                                        -> Filter: (customer_address.ca_gmt_offset = -8.00)  (cost=27.6..20912 rows=758 height=1) (actual time=0.029..1.93 rows=365 loops=1)
                                                            -> Table scan on customer_address  (cost=2.7..20475 rows=7582 height=1) (actual time=0.0243..1.49 rows=7540 loops=1)
                        -> Table scan on cs  (cost=1461..1461 rows=0.001 height=1) (actual time=0.00876..0.00876 rows=0 loops=1)
                            -> Materialize CTE cs  (cost=1461..1461 rows=0.001 height=1) (actual time=0.0086..0.0086 rows=0 loops=1)
                                -> Group aggregate: sum(catalog_sales.cs_ext_sales_price)  (cost=1458..1458 rows=0.001 height=1) (actual time=0.00682..0.00682 rows=0 loops=1)
                                    -> Sort: item.i_item_id  (cost=1458..1458 rows=0.001 height=1) (actual time=0.00655..0.00655 rows=0 loops=1)
                                        -> Inner hash join (LooseScan) (item.i_item_id = item.i_item_id) (fill_ratio=0)  (cost=1458..1458 rows=0.001 height=1) (actual time=0.00579..0.00579 rows=0 loops=1)
                                            -> Remove duplicates from input grouped on item.i_item_id  (cost=1423..1439 rows=15.8 height=1) (never executed)
                                                -> Sort: item.i_item_id  (cost=1422..1422 rows=75 height=1) (never executed)
                                                    -> Filter: (item.i_color in ('orchid','chiffon','lace'))  (cost=18.4..1381 rows=75 height=1) (never executed)
                                                        -> Table scan on item  (cost=5.47..1366 rows=250 height=1) (never executed)
                                            -> Hash
                                                -> Inner hash join (catalog_sales.cs_sold_date_sk = date_dim.d_date_sk) (fill_ratio=0)  (cost=15.6..15.6 rows=0.001 height=1) (actual time=0.00448..0.00448 rows=0 loops=1)
                                                    -> Nested loop inner join  (cost=14.6..14.6 rows=0.1 height=1) (never executed)
                                                        -> Nested loop inner join  (cost=8.67..8.67 rows=1 height=1) (never executed)
                                                            -> Table scan on catalog_sales  (cost=0.747..0.747 rows=1 height=1) (never executed)
                                                            -> Single-row index lookup on item using PRIMARY (i_item_sk = catalog_sales.cs_item_sk)  (cost=7.93..7.93 rows=1 height=1) (never executed)
                                                        -> Filter: (customer_address.ca_gmt_offset = -8.00)  (cost=5.91..5.91 rows=0.1 height=1) (never executed)
                                                            -> Single-row index lookup on customer_address using PRIMARY (ca_address_sk = catalog_sales.cs_bill_addr_sk)  (cost=5.85..5.85 rows=1 height=1) (never executed)
                                                    -> Hash
                                                        -> Filter: ((date_dim.d_year = 2000) and (date_dim.d_moy = 1))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.00286..0.00286 rows=0 loops=1)
                                                            -> Table scan on date_dim  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00227..0.00269 rows=1 loops=1)
                        -> Table scan on ws  (cost=1461..1461 rows=0.001 height=1) (actual time=0.007..0.007 rows=0 loops=1)
                            -> Materialize CTE ws  (cost=1461..1461 rows=0.001 height=1) (actual time=0.00684..0.00684 rows=0 loops=1)
                                -> Group aggregate: sum(web_sales.ws_ext_sales_price)  (cost=1458..1458 rows=0.001 height=1) (actual time=0.00594..0.00594 rows=0 loops=1)
                                    -> Sort: item.i_item_id  (cost=1458..1458 rows=0.001 height=1) (actual time=0.00581..0.00581 rows=0 loops=1)
                                        -> Inner hash join (LooseScan) (item.i_item_id = item.i_item_id) (fill_ratio=0)  (cost=1458..1458 rows=0.001 height=1) (actual time=0.00493..0.00493 rows=0 loops=1)
                                            -> Remove duplicates from input grouped on item.i_item_id  (cost=1423..1439 rows=15.8 height=1) (never executed)
                                                -> Sort: item.i_item_id  (cost=1422..1422 rows=75 height=1) (never executed)
                                                    -> Filter: (item.i_color in ('orchid','chiffon','lace'))  (cost=18.4..1381 rows=75 height=1) (never executed)
                                                        -> Table scan on item  (cost=5.47..1366 rows=250 height=1) (never executed)
                                            -> Hash
                                                -> Inner hash join (web_sales.ws_sold_date_sk = date_dim.d_date_sk) (fill_ratio=0)  (cost=15.6..15.6 rows=0.001 height=1) (actual time=0.0041..0.0041 rows=0 loops=1)
                                                    -> Nested loop inner join  (cost=14.6..14.6 rows=0.1 height=1) (never executed)
                                                        -> Nested loop inner join  (cost=8.67..8.67 rows=1 height=1) (never executed)
                                                            -> Table scan on web_sales  (cost=0.747..0.747 rows=1 height=1) (never executed)
                                                            -> Single-row index lookup on item using PRIMARY (i_item_sk = web_sales.ws_item_sk)  (cost=7.93..7.93 rows=1 height=1) (never executed)
                                                        -> Filter: (customer_address.ca_gmt_offset = -8.00)  (cost=5.91..5.91 rows=0.1 height=1) (never executed)
                                                            -> Single-row index lookup on customer_address using PRIMARY (ca_address_sk = web_sales.ws_bill_addr_sk)  (cost=5.85..5.85 rows=1 height=1) (never executed)
                                                    -> Hash
                                                        -> Filter: ((date_dim.d_year = 2000) and (date_dim.d_moy = 1))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.00279..0.00279 rows=0 loops=1)
                                                            -> Table scan on date_dim  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00222..0.00262 rows=1 loops=1)
