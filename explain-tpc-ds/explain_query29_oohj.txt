Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 1398 bytes
EXPLAIN
-> Limit: 100 row(s)  (cost=294..294 rows=136e-6 height=1) (actual time=0.0227..0.0227 rows=0 loops=1)
    -> Group aggregate: sum(store_sales.ss_quantity), sum(store_returns.sr_return_quantity), sum(catalog_sales.cs_quantity)  (cost=294..294 rows=136e-6 height=1) (actual time=0.0224..0.0224 rows=0 loops=1)
        -> Inner hash join (d1.d_date_sk = store_sales.ss_sold_date_sk)  (optimistic hash join, o_level=0.8, o_func=LINEAR, went_on_disk=false) (fill_ratio=0)  (cost=294..294 rows=136e-6 height=1) (actual time=0.0217..0.0217 rows=0 loops=1)
            -> Sort: item.i_item_id, item.i_item_desc, store.s_store_id, store.s_store_name  (cost=293..293 rows=0.0136 height=1) (never executed)
                -> Nested loop inner join  (cost=293..293 rows=0.0136 height=1) (never executed)
                    -> Nested loop inner join  (cost=285..285 rows=0.0136 height=1) (never executed)
                        -> Inner hash join (store_returns.sr_returned_date_sk = d2.d_date_sk) (fill_ratio=0)  (cost=281..281 rows=0.136 height=1) (never executed)
                            -> Filter: (store_returns.sr_customer_sk = catalog_sales.cs_bill_customer_sk)  (cost=23.9..278 rows=12.3 height=1) (never executed)
                                -> Nested loop inner join  (cost=2.21..271 rows=123 height=1) (never executed)
                                    -> Inner hash join (catalog_sales.cs_sold_date_sk = d3.d_date_sk) (fill_ratio=0)  (cost=10.3..10.3 rows=0.3 height=1) (never executed)
                                        -> Nested loop inner join  (cost=8.72..8.72 rows=1 height=1) (never executed)
                                            -> Table scan on catalog_sales  (cost=0.747..0.747 rows=1 height=1) (never executed)
                                            -> Single-row index lookup on item using PRIMARY (i_item_sk = catalog_sales.cs_item_sk)  (cost=7.97..7.97 rows=1 height=1) (never executed)
                                        -> Hash
                                            -> Filter: (d3.d_year in (1999,<cache>((1999 + 1)),<cache>((1999 + 2))))  (cost=0.915..0.915 rows=0.3 height=1) (never executed)
                                                -> Table scan on d3  (cost=0.857..0.857 rows=1 height=1) (never executed)
                                    -> Index lookup on store_returns using PRIMARY (sr_item_sk = item.i_item_sk)  (cost=0.637..260 rows=408 height=1) (never executed)
                            -> Hash
                                -> Filter: ((d2.d_year = 1999) and (d2.d_moy between 4 and <cache>((4 + 3))))  (cost=0.967..0.967 rows=0.0111 height=1) (never executed)
                                    -> Table scan on d2  (cost=0.903..0.903 rows=1 height=1) (never executed)
                        -> Filter: (store_sales.ss_customer_sk = store_returns.sr_customer_sk)  (cost=3.49..3.49 rows=0.1 height=1) (never executed)
                            -> Single-row index lookup on store_sales using PRIMARY (ss_item_sk = store_returns.sr_item_sk, ss_ticket_number = store_returns.sr_ticket_number)  (cost=3.43..3.43 rows=1 height=1) (never executed)
                    -> Single-row index lookup on store using PRIMARY (s_store_sk = store_sales.ss_store_sk)  (cost=8.1..8.1 rows=1 height=1) (never executed)
            -> Hash
                -> Filter: ((d1.d_moy = 4) and (d1.d_year = 1999))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.0175..0.0175 rows=0 loops=1)
                    -> Table scan on d1  (cost=0.903..0.903 rows=1 height=1) (actual time=0.0146..0.0164 rows=1 loops=1)
