Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 864 bytes
EXPLAIN
-> Limit: 100 row(s)  (cost=105..105 rows=0.01 height=1) (actual time=0.0215..0.0215 rows=0 loops=1)
    -> Group aggregate: sum(web_sales.ws_sales_price)  (cost=105..105 rows=0.01 height=1) (actual time=0.0212..0.0212 rows=0 loops=1)
        -> Inner hash join (web_sales.ws_sold_date_sk = date_dim.d_date_sk)  (optimistic hash join, o_level=0.8, o_func=LINEAR, went_on_disk=false) (fill_ratio=0)  (cost=105..105 rows=0.01 height=1) (actual time=0.0206..0.0206 rows=0 loops=1)
            -> Sort: customer_address.ca_zip, customer_address.ca_county  (cost=104..104 rows=1 height=1) (never executed)
                -> Nested loop inner join  (cost=104..104 rows=1 height=1) (never executed)
                    -> Nested loop inner join  (cost=11.7..11.7 rows=1 height=1) (never executed)
                        -> Nested loop inner join  (cost=5.84..5.84 rows=1 height=1) (never executed)
                            -> Table scan on web_sales  (cost=0.747..0.747 rows=1 height=1) (never executed)
                            -> Single-row index lookup on customer using PRIMARY (c_customer_sk = web_sales.ws_bill_customer_sk)  (cost=5.1..5.1 rows=1 height=1) (never executed)
                        -> Single-row index lookup on customer_address using PRIMARY (ca_address_sk = customer.c_current_addr_sk)  (cost=5.89..5.89 rows=1 height=1) (never executed)
                    -> Filter: ((substr(customer_address.ca_zip,1,5) in ('85669','86197','88274','83405','86475','85392','85460','80348','81792')) or <in_optimizer>(item.i_item_id,<exists>(select #2)))  (cost=92..92 rows=1 height=1) (never executed)
                        -> Single-row index lookup on item using PRIMARY (i_item_sk = web_sales.ws_item_sk)  (cost=7.93..7.93 rows=1 height=1) (never executed)
                        -> Select #2 (subquery in condition; dependent)
                            -> Filter: (<cache>(item.i_item_id) = item.i_item_id)  (cost=84..84 rows=1 height=1) (never executed)
                                -> Index range scan on item using PRIMARY over (i_item_sk = 2) OR (i_item_sk = 3) OR (8 more)  (cost=8.35..83.5 rows=10 height=1) (never executed)
            -> Hash
                -> Filter: ((date_dim.d_qoy = 2) and (date_dim.d_year = 2000))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.0174..0.0174 rows=0 loops=1)
                    -> Table scan on date_dim  (cost=0.903..0.903 rows=1 height=1) (actual time=0.0142..0.0159 rows=1 loops=1)
