Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 1157 bytes
EXPLAIN
-> Sort: (tmp1.sum_sales - tmp1.avg_monthly_sales), tmp1.s_store_name, limit input to 100 row(s) per chunk  (cost=263999..263999 rows=100 height=1) (actual time=0.0744..0.0744 rows=0 loops=1)
    -> Filter: ((case when (tmp1.avg_monthly_sales <> 0.000000) then (abs((tmp1.sum_sales - tmp1.avg_monthly_sales)) / tmp1.avg_monthly_sales) else NULL end) > 0.1)  (cost=263398..263626 rows=1017 height=1) (actual time=0.071..0.071 rows=0 loops=1)
        -> Table scan on tmp1  (cost=263339..263567 rows=1017 height=1) (actual time=0.0706..0.0706 rows=0 loops=1)
            -> Materialize  (cost=263339..263339 rows=1017 height=1) (actual time=0.0701..0.0701 rows=0 loops=1)
                -> Window aggregate with buffering: avg(`sum(store_sales.ss_sales_price)`) OVER (PARTITION BY item.i_category,item.i_brand,store.s_store_name,store.s_company_name )   (cost=262782..263017 rows=1017 height=1) (actual time=0.0669..0.0669 rows=0 loops=1)
                    -> Sort: item.i_category, item.i_brand, store.s_store_name, store.s_company_name  (cost=262782..262782 rows=1017 height=1) (actual time=0.0659..0.0659 rows=0 loops=1)
                        -> Stream results  (cost=253943..262103 rows=1017 height=1) (actual time=0.0648..0.0648 rows=0 loops=1)
                            -> Group aggregate: sum(store_sales.ss_sales_price), sum(store_sales.ss_sales_price)  (cost=253942..261549 rows=1017 height=1) (actual time=0.0644..0.0644 rows=0 loops=1)
                                -> Sort: item.i_category, item.i_class, item.i_brand, store.s_store_name, store.s_company_name, date_dim.d_moy  (cost=253935..253935 rows=26796 height=1) (actual time=0.0639..0.0639 rows=0 loops=1)
                                    -> Inner hash join (store_sales.ss_store_sk = store.s_store_sk) (fill_ratio=2.19345e-05)  (cost=26.4..231959 rows=26796 height=1) (actual time=0.0614..0.0614 rows=0 loops=1)
                                        -> Inner hash join (store_sales.ss_sold_date_sk = date_dim.d_date_sk) (fill_ratio=0)  (cost=9.42..222681 rows=26796 height=1) (actual time=0.0383..0.0383 rows=0 loops=1)
                                            -> Nested loop inner join  (cost=0.61..163408 rows=267958 height=1) (actual time=0.0316..0.0316 rows=1 loops=1)
                                                -> Filter: (((item.i_category in ('Home','Books','Electronics')) and (item.i_class in ('wallpaper','parenting','musical'))) or ((item.i_category in ('Shoes','Jewelry','Men')) and (item.i_class in ('womens','birdal','pants'))))  (cost=32.7..1404 rows=43 height=1) (actual time=0.0173..0.0173 rows=1 loops=1)
                                                    -> Table scan on item  (cost=5.56..1389 rows=250 height=1) (actual time=0.013..0.0138 rows=5 loops=1)
                                                -> Index lookup on store_sales using PRIMARY (ss_item_sk = item.i_item_sk)  (cost=0.605..3770 rows=6235 height=1) (actual time=0.0137..0.0137 rows=1 loops=1)
                                            -> Hash
                                                -> Filter: (date_dim.d_year = 2000)  (cost=0.961..0.961 rows=0.1 height=1) (actual time=0.00451..0.00451 rows=0 loops=1)
                                                    -> Table scan on date_dim  (cost=0.903..0.903 rows=1 height=1) (actual time=0.0032..0.00384 rows=1 loops=1)
                                        -> Hash
                                            -> Table scan on store  (cost=6.8..13.6 rows=2 height=1) (actual time=0.0163..0.018 rows=2 loops=1)
