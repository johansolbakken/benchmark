Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 4239 bytes
EXPLAIN
-> Sort: t.`channel`, t.return_rank, t.currency_rank, t.item, limit input to 100 row(s) per chunk  (cost=205444..205444 rows=100 height=1) (actual time=0.0391..0.0391 rows=0 loops=1)
    -> Table scan on t  (cost=205372..205388 rows=100 height=1) (actual time=0.0377..0.0377 rows=0 loops=1)
        -> Union all materialize  (cost=205371..205371 rows=100 height=1) (actual time=0.0375..0.0375 rows=0 loops=1)
            -> Filter: ((web.return_rank <= 10) or (web.currency_rank <= 10))  (cost=12.4..12.4 rows=68.6e-6 height=1) (actual time=0.0244..0.0244 rows=0 loops=1)
                -> Table scan on web  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.0244..0.0244 rows=0 loops=1)
                    -> Materialize  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.0243..0.0243 rows=0 loops=1)
                        -> Window aggregate: rank() OVER (ORDER BY in_web.currency_ratio )   (cost=9.36..9.36 rows=123e-6 height=1) (actual time=0.0235..0.0235 rows=0 loops=1)
                            -> Sort: in_web.currency_ratio  (cost=9.36..9.36 rows=123e-6 height=1) (actual time=0.0234..0.0234 rows=0 loops=1)
                                -> Window aggregate: rank() OVER (ORDER BY in_web.return_ratio )   (cost=9.01..9.01 rows=123e-6 height=1) (actual time=0.023..0.023 rows=0 loops=1)
                                    -> Sort: in_web.return_ratio  (cost=9.01..9.01 rows=123e-6 height=1) (actual time=0.023..0.023 rows=0 loops=1)
                                        -> Table scan on in_web  (cost=8.67..8.67 rows=123e-6 height=1) (actual time=0.0208..0.0208 rows=0 loops=1)
                                            -> Materialize  (cost=8.67..8.67 rows=123e-6 height=1) (actual time=0.0206..0.0206 rows=0 loops=1)
                                                -> Group aggregate: sum(coalesce(ws.ws_net_paid,0)), sum(coalesce(wr.wr_return_amt,0)), sum(coalesce(ws.ws_quantity,0)), sum(coalesce(wr.wr_return_quantity,0))  (cost=5.67..5.67 rows=123e-6 height=1) (actual time=0.0188..0.0188 rows=0 loops=1)
                                                    -> Inner hash join (ws.ws_sold_date_sk = d.d_date_sk)  (optimistic hash join, o_level=0.8, o_func=LINEAR, went_on_disk=false) (fill_ratio=0)  (cost=5.67..5.67 rows=123e-6 height=1) (actual time=0.0186..0.0186 rows=0 loops=1)
                                                        -> Nested loop inner join  (cost=4.68..4.68 rows=0.0123 height=1) (never executed)
                                                            -> Sort: ws.ws_item_sk  (cost=1.27..1.27 rows=0.037 height=1) (never executed)
                                                                -> Filter: ((ws.ws_net_profit > 1.00) and (ws.ws_net_paid > 0.00) and (ws.ws_quantity > 0))  (cost=0.922..0.922 rows=0.037 height=1) (never executed)
                                                                    -> Table scan on ws  (cost=0.839..0.839 rows=1 height=1) (never executed)
                                                            -> Filter: (wr.wr_return_amt > 10000.00)  (cost=3.42..3.42 rows=0.333 height=1) (never executed)
                                                                -> Single-row index lookup on wr using PRIMARY (wr_item_sk = ws.ws_item_sk, wr_order_number = ws.ws_order_number)  (cost=3.36..3.36 rows=1 height=1) (never executed)
                                                        -> Hash
                                                            -> Filter: ((d.d_year = 2000) and (d.d_moy = 12))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.0168..0.0168 rows=0 loops=1)
                                                                -> Table scan on d  (cost=0.903..0.903 rows=1 height=1) (actual time=0.0142..0.0161 rows=1 loops=1)
            -> Filter: ((catalog.return_rank <= 10) or (catalog.currency_rank <= 10))  (cost=12.4..12.4 rows=68.6e-6 height=1) (actual time=0.00471..0.00471 rows=0 loops=1)
                -> Table scan on catalog  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.00463..0.00463 rows=0 loops=1)
                    -> Materialize  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.00454..0.00454 rows=0 loops=1)
                        -> Window aggregate: rank() OVER (ORDER BY in_cat.currency_ratio )   (cost=9.39..9.39 rows=123e-6 height=1) (actual time=0.004..0.004 rows=0 loops=1)
                            -> Sort: in_cat.currency_ratio  (cost=9.39..9.39 rows=123e-6 height=1) (actual time=0.00392..0.00392 rows=0 loops=1)
                                -> Window aggregate: rank() OVER (ORDER BY in_cat.return_ratio )   (cost=9.05..9.05 rows=123e-6 height=1) (actual time=0.00371..0.00371 rows=0 loops=1)
                                    -> Sort: in_cat.return_ratio  (cost=9.05..9.05 rows=123e-6 height=1) (actual time=0.00363..0.00363 rows=0 loops=1)
                                        -> Table scan on in_cat  (cost=8.7..8.7 rows=123e-6 height=1) (actual time=0.00342..0.00342 rows=0 loops=1)
                                            -> Materialize  (cost=8.7..8.7 rows=123e-6 height=1) (actual time=0.00329..0.00329 rows=0 loops=1)
                                                -> Group aggregate: sum(coalesce(cs.cs_net_paid,0)), sum(coalesce(cr.cr_return_amount,0)), sum(coalesce(cs.cs_quantity,0)), sum(coalesce(cr.cr_return_quantity,0))  (cost=5.7..5.7 rows=123e-6 height=1) (actual time=0.00254..0.00254 rows=0 loops=1)
                                                    -> Inner hash join (cs.cs_sold_date_sk = d.d_date_sk)  (optimistic hash join, o_level=0.8, o_func=LINEAR, went_on_disk=false) (fill_ratio=0)  (cost=5.7..5.7 rows=123e-6 height=1) (actual time=0.00246..0.00246 rows=0 loops=1)
                                                        -> Nested loop inner join  (cost=4.72..4.72 rows=0.0123 height=1) (never executed)
                                                            -> Sort: cs.cs_item_sk  (cost=1.27..1.27 rows=0.037 height=1) (never executed)
                                                                -> Filter: ((cs.cs_net_profit > 1.00) and (cs.cs_net_paid > 0.00) and (cs.cs_quantity > 0))  (cost=0.922..0.922 rows=0.037 height=1) (never executed)
                                                                    -> Table scan on cs  (cost=0.839..0.839 rows=1 height=1) (never executed)
                                                            -> Filter: (cr.cr_return_amount > 10000.00)  (cost=3.45..3.45 rows=0.333 height=1) (never executed)
                                                                -> Single-row index lookup on cr using PRIMARY (cr_item_sk = cs.cs_item_sk, cr_order_number = cs.cs_order_number)  (cost=3.39..3.39 rows=1 height=1) (never executed)
                                                        -> Hash
                                                            -> Filter: ((d.d_year = 2000) and (d.d_moy = 12))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.00188..0.00188 rows=0 loops=1)
                                                                -> Table scan on d  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00154..0.00175 rows=1 loops=1)
            -> Filter: ((store.return_rank <= 10) or (store.currency_rank <= 10))  (cost=205275..205315 rows=100 height=1) (actual time=0.00629..0.00629 rows=0 loops=1)
                -> Table scan on store  (cost=205265..205305 rows=181 height=1) (actual time=0.00621..0.00621 rows=0 loops=1)
                    -> Materialize  (cost=205264..205264 rows=181 height=1) (actual time=0.00608..0.00608 rows=0 loops=1)
                        -> Window aggregate: rank() OVER (ORDER BY in_store.currency_ratio )   (cost=205180..205221 rows=181 height=1) (actual time=0.00542..0.00542 rows=0 loops=1)
                            -> Sort: in_store.currency_ratio  (cost=205180..205180 rows=181 height=1) (actual time=0.00533..0.00533 rows=0 loops=1)
                                -> Window aggregate: rank() OVER (ORDER BY in_store.return_ratio )   (cost=205032..205073 rows=181 height=1) (actual time=0.00521..0.00521 rows=0 loops=1)
                                    -> Sort: in_store.return_ratio  (cost=205032..205032 rows=181 height=1) (actual time=0.00513..0.00513 rows=0 loops=1)
                                        -> Table scan on in_store  (cost=204896..204926 rows=181 height=1) (actual time=0.00496..0.00496 rows=0 loops=1)
                                            -> Materialize  (cost=204895..204895 rows=181 height=1) (actual time=0.00479..0.00479 rows=0 loops=1)
                                                -> Group aggregate: sum(coalesce(sts.ss_net_paid,0)), sum(coalesce(sr.sr_return_amt,0)), sum(coalesce(sts.ss_quantity,0)), sum(coalesce(sr.sr_return_quantity,0))  (cost=1135..204853 rows=181 height=1) (actual time=0.00233..0.00233 rows=0 loops=1)
                                                    -> Inner hash join (sts.ss_sold_date_sk = d.d_date_sk)  (optimistic hash join, o_level=0.8, o_func=LINEAR, went_on_disk=false) (fill_ratio=0)  (cost=14975..204799 rows=13.7 height=1) (actual time=0.00225..0.00225 rows=0 loops=1)
                                                        -> Nested loop inner join  (cost=150..204513 rows=1368 height=1) (never executed)
                                                            -> Filter: (sr.sr_return_amt > 10000.00)  (cost=2.03..74822 rows=36938 height=1) (never executed)
                                                                -> Index scan on sr using PRIMARY  (cost=0.618..68438 rows=110824 height=1) (never executed)
                                                            -> Filter: ((sts.ss_net_profit > 1.00) and (sts.ss_net_paid > 0.00) and (sts.ss_quantity > 0))  (cost=3.51..3.51 rows=0.037 height=1) (never executed)
                                                                -> Single-row index lookup on sts using PRIMARY (ss_item_sk = sr.sr_item_sk, ss_ticket_number = sr.sr_ticket_number)  (cost=3.43..3.43 rows=1 height=1) (never executed)
                                                        -> Hash
                                                            -> Filter: ((d.d_year = 2000) and (d.d_moy = 12))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.00167..0.00167 rows=0 loops=1)
                                                                -> Table scan on d  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00138..0.00159 rows=1 loops=1)
