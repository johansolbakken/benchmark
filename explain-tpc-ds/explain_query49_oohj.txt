Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 4239 bytes
EXPLAIN
-> Sort: t.`channel`, t.return_rank, t.currency_rank, t.item, limit input to 100 row(s) per chunk  (cost=189363..189363 rows=100 height=1) (actual time=0.0511..0.0511 rows=0 loops=1)
    -> Table scan on t  (cost=189287..189305 rows=107 height=1) (actual time=0.0491..0.0491 rows=0 loops=1)
        -> Union all materialize  (cost=189287..189287 rows=107 height=1) (actual time=0.049..0.049 rows=0 loops=1)
            -> Filter: ((web.return_rank <= 10) or (web.currency_rank <= 10))  (cost=12.4..12.4 rows=68.6e-6 height=1) (actual time=0.0289..0.0289 rows=0 loops=1)
                -> Table scan on web  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.0287..0.0287 rows=0 loops=1)
                    -> Materialize  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.0285..0.0285 rows=0 loops=1)
                        -> Window aggregate: rank() OVER (ORDER BY in_web.currency_ratio )   (cost=9.36..9.36 rows=123e-6 height=1) (actual time=0.0274..0.0274 rows=0 loops=1)
                            -> Sort: in_web.currency_ratio  (cost=9.36..9.36 rows=123e-6 height=1) (actual time=0.0272..0.0272 rows=0 loops=1)
                                -> Window aggregate: rank() OVER (ORDER BY in_web.return_ratio )   (cost=9.01..9.01 rows=123e-6 height=1) (actual time=0.0262..0.0262 rows=0 loops=1)
                                    -> Sort: in_web.return_ratio  (cost=9.01..9.01 rows=123e-6 height=1) (actual time=0.0258..0.0258 rows=0 loops=1)
                                        -> Table scan on in_web  (cost=8.67..8.67 rows=123e-6 height=1) (actual time=0.0235..0.0235 rows=0 loops=1)
                                            -> Materialize  (cost=8.67..8.67 rows=123e-6 height=1) (actual time=0.023..0.023 rows=0 loops=1)
                                                -> Group aggregate: sum(coalesce(ws.ws_net_paid,0)), sum(coalesce(wr.wr_return_amt,0)), sum(coalesce(ws.ws_quantity,0)), sum(coalesce(wr.wr_return_quantity,0))  (cost=5.67..5.67 rows=123e-6 height=1) (actual time=0.0213..0.0213 rows=0 loops=1)
                                                    -> Inner hash join (ws.ws_sold_date_sk = d.d_date_sk)  (optimistic hash join, o_level=0.8, o_func=LINEAR, went_on_disk=false) (fill_ratio=0)  (cost=5.67..5.67 rows=123e-6 height=1) (actual time=0.0207..0.0207 rows=0 loops=1)
                                                        -> Nested loop inner join  (cost=4.68..4.68 rows=0.0123 height=1) (never executed)
                                                            -> Sort: ws.ws_item_sk  (cost=1.27..1.27 rows=0.037 height=1) (never executed)
                                                                -> Filter: ((ws.ws_net_profit > 1.00) and (ws.ws_net_paid > 0.00) and (ws.ws_quantity > 0))  (cost=0.922..0.922 rows=0.037 height=1) (never executed)
                                                                    -> Table scan on ws  (cost=0.839..0.839 rows=1 height=1) (never executed)
                                                            -> Filter: (wr.wr_return_amt > 10000.00)  (cost=3.42..3.42 rows=0.333 height=1) (never executed)
                                                                -> Single-row index lookup on wr using PRIMARY (wr_item_sk = ws.ws_item_sk, wr_order_number = ws.ws_order_number)  (cost=3.36..3.36 rows=1 height=1) (never executed)
                                                        -> Hash
                                                            -> Filter: ((d.d_year = 2000) and (d.d_moy = 12))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.0177..0.0177 rows=0 loops=1)
                                                                -> Table scan on d  (cost=0.903..0.903 rows=1 height=1) (actual time=0.0147..0.0165 rows=1 loops=1)
            -> Filter: ((catalog.return_rank <= 10) or (catalog.currency_rank <= 10))  (cost=12.4..12.4 rows=68.6e-6 height=1) (actual time=0.00966..0.00966 rows=0 loops=1)
                -> Table scan on catalog  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.00956..0.00956 rows=0 loops=1)
                    -> Materialize  (cost=12.4..12.4 rows=123e-6 height=1) (actual time=0.00942..0.00942 rows=0 loops=1)
                        -> Window aggregate: rank() OVER (ORDER BY in_cat.currency_ratio )   (cost=9.39..9.39 rows=123e-6 height=1) (actual time=0.00807..0.00807 rows=0 loops=1)
                            -> Sort: in_cat.currency_ratio  (cost=9.39..9.39 rows=123e-6 height=1) (actual time=0.00795..0.00795 rows=0 loops=1)
                                -> Window aggregate: rank() OVER (ORDER BY in_cat.return_ratio )   (cost=9.05..9.05 rows=123e-6 height=1) (actual time=0.00743..0.00743 rows=0 loops=1)
                                    -> Sort: in_cat.return_ratio  (cost=9.05..9.05 rows=123e-6 height=1) (actual time=0.00734..0.00734 rows=0 loops=1)
                                        -> Table scan on in_cat  (cost=8.7..8.7 rows=123e-6 height=1) (actual time=0.00677..0.00677 rows=0 loops=1)
                                            -> Materialize  (cost=8.7..8.7 rows=123e-6 height=1) (actual time=0.00658..0.00658 rows=0 loops=1)
                                                -> Group aggregate: sum(coalesce(cs.cs_net_paid,0)), sum(coalesce(cr.cr_return_amount,0)), sum(coalesce(cs.cs_quantity,0)), sum(coalesce(cr.cr_return_quantity,0))  (cost=5.7..5.7 rows=123e-6 height=1) (actual time=0.00561..0.00561 rows=0 loops=1)
                                                    -> Inner hash join (cs.cs_sold_date_sk = d.d_date_sk)  (optimistic hash join, o_level=0.8, o_func=LINEAR, went_on_disk=false) (fill_ratio=0)  (cost=5.7..5.7 rows=123e-6 height=1) (actual time=0.00547..0.00547 rows=0 loops=1)
                                                        -> Nested loop inner join  (cost=4.72..4.72 rows=0.0123 height=1) (never executed)
                                                            -> Sort: cs.cs_item_sk  (cost=1.27..1.27 rows=0.037 height=1) (never executed)
                                                                -> Filter: ((cs.cs_net_profit > 1.00) and (cs.cs_net_paid > 0.00) and (cs.cs_quantity > 0))  (cost=0.922..0.922 rows=0.037 height=1) (never executed)
                                                                    -> Table scan on cs  (cost=0.839..0.839 rows=1 height=1) (never executed)
                                                            -> Filter: (cr.cr_return_amount > 10000.00)  (cost=3.45..3.45 rows=0.333 height=1) (never executed)
                                                                -> Single-row index lookup on cr using PRIMARY (cr_item_sk = cs.cs_item_sk, cr_order_number = cs.cs_order_number)  (cost=3.39..3.39 rows=1 height=1) (never executed)
                                                        -> Hash
                                                            -> Filter: ((d.d_year = 2000) and (d.d_moy = 12))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.0037..0.0037 rows=0 loops=1)
                                                                -> Table scan on d  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00294..0.00348 rows=1 loops=1)
            -> Filter: ((store.return_rank <= 10) or (store.currency_rank <= 10))  (cost=189186..189229 rows=107 height=1) (actual time=0.00753..0.00753 rows=0 loops=1)
                -> Table scan on store  (cost=189175..189218 rows=192 height=1) (actual time=0.00743..0.00743 rows=0 loops=1)
                    -> Materialize  (cost=189175..189175 rows=192 height=1) (actual time=0.00727..0.00727 rows=0 loops=1)
                        -> Window aggregate: rank() OVER (ORDER BY in_store.currency_ratio )   (cost=189085..189129 rows=192 height=1) (actual time=0.00611..0.00611 rows=0 loops=1)
                            -> Sort: in_store.currency_ratio  (cost=189085..189085 rows=192 height=1) (actual time=0.00601..0.00601 rows=0 loops=1)
                                -> Window aggregate: rank() OVER (ORDER BY in_store.return_ratio )   (cost=188927..188971 rows=192 height=1) (actual time=0.00555..0.00555 rows=0 loops=1)
                                    -> Sort: in_store.return_ratio  (cost=188927..188927 rows=192 height=1) (actual time=0.00545..0.00545 rows=0 loops=1)
                                        -> Table scan on in_store  (cost=188781..188813 rows=192 height=1) (actual time=0.0049..0.0049 rows=0 loops=1)
                                            -> Materialize  (cost=188781..188781 rows=192 height=1) (actual time=0.0047..0.0047 rows=0 loops=1)
                                                -> Group aggregate: sum(coalesce(sts.ss_net_paid,0)), sum(coalesce(sr.sr_return_amt,0)), sum(coalesce(sts.ss_quantity,0)), sum(coalesce(sr.sr_return_quantity,0))  (cost=982..188736 rows=192 height=1) (actual time=0.0039..0.0039 rows=0 loops=1)
                                                    -> Inner hash join (sts.ss_sold_date_sk = d.d_date_sk)  (optimistic hash join, o_level=0.8, o_func=LINEAR, went_on_disk=false) (fill_ratio=0)  (cost=14975..188680 rows=12.6 height=1) (actual time=0.00378..0.00378 rows=0 loops=1)
                                                        -> Nested loop inner join  (cost=150..188416 rows=1260 height=1) (never executed)
                                                            -> Filter: (sr.sr_return_amt > 10000.00)  (cost=2.03..68933 rows=34030 height=1) (never executed)
                                                                -> Index scan on sr using PRIMARY  (cost=0.618..63051 rows=102101 height=1) (never executed)
                                                            -> Filter: ((sts.ss_net_profit > 1.00) and (sts.ss_net_paid > 0.00) and (sts.ss_quantity > 0))  (cost=3.51..3.51 rows=0.037 height=1) (never executed)
                                                                -> Single-row index lookup on sts using PRIMARY (ss_item_sk = sr.sr_item_sk, ss_ticket_number = sr.sr_ticket_number)  (cost=3.43..3.43 rows=1 height=1) (never executed)
                                                        -> Hash
                                                            -> Filter: ((d.d_year = 2000) and (d.d_moy = 12))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.0027..0.0027 rows=0 loops=1)
                                                                -> Table scan on d  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00213..0.00254 rows=1 loops=1)
