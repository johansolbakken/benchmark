Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 1910 bytes
EXPLAIN
-> Limit: 100 row(s)  (cost=4.72e+6..4.72e+6 rows=13.6e-6 height=1) (actual time=0.0711..0.0711 rows=0 loops=1)
    -> Nested loop inner join  (cost=4.72e+6..4.72e+6 rows=13.6e-6 height=1) (actual time=0.0708..0.0708 rows=0 loops=1)
        -> Sort: (v1.sum_sales - v1.avg_monthly_sales), nsum  (cost=3.15e+6..3.15e+6 rows=0.00853 height=1) (actual time=0.0704..0.0704 rows=0 loops=1)
            -> Inner hash join (v1.rn = (v1_lead.rn - 1)), (v1_lead.i_category = v1.i_category), (v1_lead.i_brand = v1.i_brand), (v1_lead.s_store_name = v1.s_store_name), (v1_lead.s_company_name = v1.s_company_name) (fill_ratio=0)  (cost=3.15e+6..3.15e+6 rows=0.00853 height=1) (actual time=0.0688..0.0688 rows=0 loops=1)
                -> Table scan on v1_lead  (cost=1.57e+6..1.57e+6 rows=160 height=1) (actual time=0.0666..0.0666 rows=0 loops=1)
                    -> Materialize CTE v1 if needed  (cost=1.57e+6..1.57e+6 rows=160 height=1) (actual time=0.0661..0.0661 rows=0 loops=1)
                        -> Window aggregate: rank() OVER (PARTITION BY item.i_category,item.i_brand,store.s_store_name,store.s_company_name ORDER BY date_dim.d_year,date_dim.d_moy )   (cost=1.52e+6..1.57e+6 rows=160 height=1) (actual time=0.0609..0.0609 rows=0 loops=1)
                            -> Window aggregate with buffering: avg(`sum(store_sales.ss_sales_price)`) OVER (PARTITION BY item.i_category,item.i_brand,store.s_store_name,store.s_company_name,date_dim.d_year )   (cost=1.52e+6..1.57e+6 rows=160 height=1) (actual time=0.0606..0.0606 rows=0 loops=1)
                                -> Stream results  (cost=1.52e+6..1.57e+6 rows=160 height=1) (actual time=0.0594..0.0594 rows=0 loops=1)
                                    -> Group aggregate: sum(store_sales.ss_sales_price), sum(store_sales.ss_sales_price)  (cost=1.52e+6..1.57e+6 rows=160 height=1) (actual time=0.0591..0.0591 rows=0 loops=1)
                                        -> Sort: item.i_category, item.i_brand, store.s_store_name, store.s_company_name, date_dim.d_year, date_dim.d_moy  (cost=1.52e+6..1.52e+6 rows=183799 height=1) (actual time=0.0582..0.0582 rows=0 loops=1)
                                            -> Inner hash join (store_sales.ss_store_sk = store.s_store_sk) (fill_ratio=2.19345e-05)  (cost=25.1..1.36e+6 rows=183799 height=1) (actual time=0.0556..0.0556 rows=0 loops=1)
                                                -> Inner hash join (store_sales.ss_sold_date_sk = date_dim.d_date_sk) (fill_ratio=0)  (cost=8.17..1.29e+6 rows=183799 height=1) (actual time=0.0327..0.0327 rows=0 loops=1)
                                                    -> Nested loop inner join  (cost=0.605..943809 rows=1.56e+6 height=1) (actual time=0.0254..0.0254 rows=1 loops=1)
                                                        -> Table scan on item  (cost=5.51..1378 rows=250 height=1) (actual time=0.0114..0.0114 rows=1 loops=1)
                                                        -> Index lookup on store_sales using PRIMARY (ss_item_sk = item.i_item_sk)  (cost=0.605..3770 rows=6235 height=1) (actual time=0.0137..0.0137 rows=1 loops=1)
                                                    -> Hash
                                                        -> Filter: ((date_dim.d_year = 2000) or ((date_dim.d_year = <cache>((2000 - 1))) and (date_dim.d_moy = 12)) or ((date_dim.d_year = <cache>((2000 + 1))) and (date_dim.d_moy = 1)))  (cost=0.961..0.961 rows=0.118 height=1) (actual time=0.00583..0.00583 rows=0 loops=1)
                                                            -> Table scan on date_dim  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00327..0.00397 rows=1 loops=1)
                                                -> Hash
                                                    -> Table scan on store  (cost=6.8..13.6 rows=2 height=1) (actual time=0.0162..0.0179 rows=2 loops=1)
                -> Hash
                    -> Filter: ((v1.d_year = 2000) and (v1.avg_monthly_sales > 0.000000) and ((case when (v1.avg_monthly_sales > 0.000000) then (abs((v1.sum_sales - v1.avg_monthly_sales)) / v1.avg_monthly_sales) else NULL end) > 0.1))  (cost=1.57e+6..1.57e+6 rows=5.33 height=1) (never executed)
                        -> Table scan on v1  (cost=1.57e+6..1.57e+6 rows=160 height=1) (never executed)
                            -> Materialize CTE v1 if needed (query plan printed elsewhere)  (cost=1.57e+6..1.57e+6 rows=160 height=1) (never executed)
        -> Filter: (v1.rn = (v1_lag.rn + 1))  (cost=1.57e+6..1.57e+6 rows=0.0016 height=1) (never executed)
            -> Index lookup on v1_lag using <auto_key0> (i_category = v1.i_category, i_brand = v1.i_brand, s_store_name = v1.s_store_name, s_company_name = v1.s_company_name)  (cost=1.57e+6..1.57e+6 rows=0.016 height=1) (never executed)
                -> Materialize CTE v1 if needed (query plan printed elsewhere)  (cost=1.57e+6..1.57e+6 rows=160 height=1) (never executed)
