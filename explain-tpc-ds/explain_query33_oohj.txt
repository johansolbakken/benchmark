Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 2038 bytes
EXPLAIN
-> Sort: total_sales, limit input to 100 row(s) per chunk  (cost=1.3e+6..1.3e+6 rows=3.87 height=1) (actual time=2.47..2.47 rows=0 loops=1)
    -> Stream results  (cost=1.3e+6..1.3e+6 rows=3.87 height=1) (actual time=2.47..2.47 rows=0 loops=1)
        -> Group aggregate: sum(tmp1.total_sales)  (cost=1.3e+6..1.3e+6 rows=3.87 height=1) (actual time=2.47..2.47 rows=0 loops=1)
            -> Sort: tmp1.i_manufact_id  (cost=1.3e+6..1.3e+6 rows=15.8 height=1) (actual time=2.47..2.47 rows=0 loops=1)
                -> Table scan on tmp1  (cost=1.3e+6..1.3e+6 rows=15.8 height=1) (actual time=2.47..2.47 rows=0 loops=1)
                    -> Union all materialize  (cost=1.3e+6..1.3e+6 rows=15.8 height=1) (actual time=2.47..2.47 rows=0 loops=1)
                        -> Table scan on ss  (cost=1.3e+6..1.3e+6 rows=15.8 height=1) (actual time=2.45..2.45 rows=0 loops=1)
                            -> Materialize CTE ss  (cost=1.3e+6..1.3e+6 rows=15.8 height=1) (actual time=2.45..2.45 rows=0 loops=1)
                                -> Group aggregate: sum(store_sales.ss_ext_sales_price)  (cost=1.3e+6..1.3e+6 rows=15.8 height=1) (actual time=2.44..2.44 rows=0 loops=1)
                                    -> Inner hash join (LooseScan) (item.i_manufact_id = item.i_manufact_id)  (optimistic hash join, o_level=0.8, o_func=LINEAR, went_on_disk=false) (fill_ratio=0)  (cost=1.3e+6..1.3e+6 rows=1559 height=1) (actual time=2.44..2.44 rows=0 loops=1)
                                        -> Remove duplicates from input grouped on item.i_manufact_id  (cost=1394..1399 rows=15.8 height=1) (actual time=0.116..0.116 rows=1 loops=1)
                                            -> Sort: item.i_manufact_id  (cost=1393..1393 rows=25 height=1) (actual time=0.116..0.116 rows=1 loops=1)
                                                -> Filter: (item.i_category = 'Books')  (cost=55.2..1381 rows=25 height=1) (actual time=0.0245..0.106 rows=21 loops=1)
                                                    -> Table scan on item  (cost=5.47..1366 rows=250 height=1) (actual time=0.0223..0.0857 rows=250 loops=1)
                                        -> Hash
                                            -> Inner hash join (store_sales.ss_addr_sk = customer_address.ca_address_sk)  (optimistic hash join, o_level=0.8, o_func=LINEAR, went_on_disk=false) (fill_ratio=0.0128508)  (cost=24381..1.29e+6 rows=1559 height=1) (actual time=2.33..2.33 rows=0 loops=1)
                                                -> Inner hash join (store_sales.ss_sold_date_sk = date_dim.d_date_sk)  (optimistic hash join, o_level=0.8, o_func=LINEAR, went_on_disk=false) (fill_ratio=0)  (cost=1599..1.27e+6 rows=15588 height=1) (actual time=0.0066..0.0066 rows=0 loops=1)
                                                    -> Nested loop inner join  (cost=1518..943949 rows=1.56e+6 height=1) (never executed)
                                                        -> Sort: item.i_manufact_id  (cost=1517..1517 rows=250 height=1) (never executed)
                                                            -> Table scan on item  (cost=5.47..1366 rows=250 height=1) (never executed)
                                                        -> Index lookup on store_sales using PRIMARY (ss_item_sk = item.i_item_sk)  (cost=0.605..3770 rows=6235 height=1) (never executed)
                                                    -> Hash
                                                        -> Filter: ((date_dim.d_year = 1999) and (date_dim.d_moy = 3))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.00505..0.00505 rows=0 loops=1)
                                                            -> Table scan on date_dim  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00392..0.00438 rows=1 loops=1)
                                                -> Hash
                                                    -> Filter: (customer_address.ca_gmt_offset = -5.00)  (cost=27.6..20912 rows=758 height=1) (actual time=0.0277..2.05 rows=2695 loops=1)
                                                        -> Table scan on customer_address  (cost=2.7..20475 rows=7582 height=1) (actual time=0.0266..1.54 rows=7540 loops=1)
                        -> Table scan on cs  (cost=1421..1421 rows=0.001 height=1) (actual time=0.00873..0.00873 rows=0 loops=1)
                            -> Materialize CTE cs  (cost=1421..1421 rows=0.001 height=1) (actual time=0.00855..0.00855 rows=0 loops=1)
                                -> Group aggregate: sum(catalog_sales.cs_ext_sales_price)  (cost=1418..1418 rows=0.001 height=1) (actual time=0.00631..0.00631 rows=0 loops=1)
                                    -> Inner hash join (LooseScan) (item.i_manufact_id = item.i_manufact_id)  (optimistic hash join, o_level=0.8, o_func=LINEAR, went_on_disk=false) (fill_ratio=0)  (cost=1418..1418 rows=0.001 height=1) (actual time=0.00608..0.00608 rows=0 loops=1)
                                        -> Remove duplicates from input grouped on item.i_manufact_id  (cost=1394..1399 rows=15.8 height=1) (never executed)
                                            -> Sort: item.i_manufact_id  (cost=1393..1393 rows=25 height=1) (never executed)
                                                -> Filter: (item.i_category = 'Books')  (cost=55.2..1381 rows=25 height=1) (never executed)
                                                    -> Table scan on item  (cost=5.47..1366 rows=250 height=1) (never executed)
                                        -> Hash
                                            -> Inner hash join (catalog_sales.cs_sold_date_sk = date_dim.d_date_sk) (fill_ratio=0)  (cost=15.6..15.6 rows=0.001 height=1) (actual time=0.00355..0.00355 rows=0 loops=1)
                                                -> Nested loop inner join  (cost=14.6..14.6 rows=0.1 height=1) (never executed)
                                                    -> Nested loop inner join  (cost=8.67..8.67 rows=1 height=1) (never executed)
                                                        -> Table scan on catalog_sales  (cost=0.747..0.747 rows=1 height=1) (never executed)
                                                        -> Single-row index lookup on item using PRIMARY (i_item_sk = catalog_sales.cs_item_sk)  (cost=7.93..7.93 rows=1 height=1) (never executed)
                                                    -> Filter: (customer_address.ca_gmt_offset = -5.00)  (cost=5.91..5.91 rows=0.1 height=1) (never executed)
                                                        -> Single-row index lookup on customer_address using PRIMARY (ca_address_sk = catalog_sales.cs_bill_addr_sk)  (cost=5.85..5.85 rows=1 height=1) (never executed)
                                                -> Hash
                                                    -> Filter: ((date_dim.d_year = 1999) and (date_dim.d_moy = 3))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.00282..0.00282 rows=0 loops=1)
                                                        -> Table scan on date_dim  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00216..0.00256 rows=1 loops=1)
                        -> Table scan on ws  (cost=1421..1421 rows=0.001 height=1) (actual time=0.00702..0.00702 rows=0 loops=1)
                            -> Materialize CTE ws  (cost=1421..1421 rows=0.001 height=1) (actual time=0.00687..0.00687 rows=0 loops=1)
                                -> Group aggregate: sum(web_sales.ws_ext_sales_price)  (cost=1418..1418 rows=0.001 height=1) (actual time=0.00581..0.00581 rows=0 loops=1)
                                    -> Inner hash join (LooseScan) (item.i_manufact_id = item.i_manufact_id)  (optimistic hash join, o_level=0.8, o_func=LINEAR, went_on_disk=false) (fill_ratio=0)  (cost=1418..1418 rows=0.001 height=1) (actual time=0.00559..0.00559 rows=0 loops=1)
                                        -> Remove duplicates from input grouped on item.i_manufact_id  (cost=1394..1399 rows=15.8 height=1) (never executed)
                                            -> Sort: item.i_manufact_id  (cost=1393..1393 rows=25 height=1) (never executed)
                                                -> Filter: (item.i_category = 'Books')  (cost=55.2..1381 rows=25 height=1) (never executed)
                                                    -> Table scan on item  (cost=5.47..1366 rows=250 height=1) (never executed)
                                        -> Hash
                                            -> Inner hash join (web_sales.ws_sold_date_sk = date_dim.d_date_sk) (fill_ratio=0)  (cost=15.6..15.6 rows=0.001 height=1) (actual time=0.00431..0.00431 rows=0 loops=1)
                                                -> Nested loop inner join  (cost=14.6..14.6 rows=0.1 height=1) (never executed)
                                                    -> Nested loop inner join  (cost=8.67..8.67 rows=1 height=1) (never executed)
                                                        -> Table scan on web_sales  (cost=0.747..0.747 rows=1 height=1) (never executed)
                                                        -> Single-row index lookup on item using PRIMARY (i_item_sk = web_sales.ws_item_sk)  (cost=7.93..7.93 rows=1 height=1) (never executed)
                                                    -> Filter: (customer_address.ca_gmt_offset = -5.00)  (cost=5.91..5.91 rows=0.1 height=1) (never executed)
                                                        -> Single-row index lookup on customer_address using PRIMARY (ca_address_sk = web_sales.ws_bill_addr_sk)  (cost=5.85..5.85 rows=1 height=1) (never executed)
                                                -> Hash
                                                    -> Filter: ((date_dim.d_year = 1999) and (date_dim.d_moy = 3))  (cost=0.967..0.967 rows=0.01 height=1) (actual time=0.00293..0.00293 rows=0 loops=1)
                                                        -> Table scan on date_dim  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00241..0.00276 rows=1 loops=1)
