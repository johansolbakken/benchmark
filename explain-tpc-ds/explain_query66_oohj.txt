Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 7806 bytes
EXPLAIN
-> Limit: 100 row(s)  (cost=27.4..27.4 rows=0.00444 height=1) (actual time=0.0376..0.0376 rows=0 loops=1)
    -> Group aggregate: sum(x.jan_sales), sum(x.feb_sales), sum(x.mar_sales), sum(x.apr_sales), sum(x.may_sales), sum(x.jun_sales), sum(x.jul_sales), sum(x.aug_sales), sum(x.sep_sales), sum(x.oct_sales), sum(x.nov_sales), sum(x.dec_sales), sum((x.jan_sales / x.w_warehouse_sq_ft)), sum((x.feb_sales / x.w_warehouse_sq_ft)), sum((x.mar_sales / x.w_warehouse_sq_ft)), sum((x.apr_sales / x.w_warehouse_sq_ft)), sum((x.may_sales / x.w_warehouse_sq_ft)), sum((x.jun_sales / x.w_warehouse_sq_ft)), sum((x.jul_sales / x.w_warehouse_sq_ft)), sum((x.aug_sales / x.w_warehouse_sq_ft)), sum((x.sep_sales / x.w_warehouse_sq_ft)), sum((x.oct_sales / x.w_warehouse_sq_ft)), sum((x.nov_sales / x.w_warehouse_sq_ft)), sum((x.dec_sales / x.w_warehouse_sq_ft)), sum(x.jan_net), sum(x.feb_net), sum(x.mar_net), sum(x.apr_net), sum(x.may_net), sum(x.jun_net), sum(x.jul_net), sum(x.aug_net), sum(x.sep_net), sum(x.oct_net), sum(x.nov_net), sum(x.dec_net)  (cost=27.4..27.4 rows=0.00444 height=1) (actual time=0.0373..0.0373 rows=0 loops=1)
        -> Sort: x.w_warehouse_name, x.w_warehouse_sq_ft, x.w_city, x.w_county, x.w_state, x.w_country, x.ship_carriers, x.`year`  (cost=27.4..27.4 rows=0.00444 height=1) (actual time=0.0369..0.0369 rows=0 loops=1)
            -> Table scan on x  (cost=27..27 rows=0.00444 height=1) (actual time=0.0351..0.0351 rows=0 loops=1)
                -> Union all materialize  (cost=27..27 rows=0.00444 height=1) (actual time=0.0346..0.0346 rows=0 loops=1)
                    -> Group aggregate: sum((case when (date_dim.d_moy = 1) then (web_sales.ws_sales_price * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 2) then (web_sales.ws_sales_price * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 3) then (web_sales.ws_sales_price * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 4) then (web_sales.ws_sales_price * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 5) then (web_sales.ws_sales_price * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 6) then (web_sales.ws_sales_price * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 7) then (web_sales.ws_sales_price * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 8) then (web_sales.ws_sales_price * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 9) then (web_sales.ws_sales_price * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 10) then (web_sales.ws_sales_price * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 11) then (web_sales.ws_sales_price * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 12) then (web_sales.ws_sales_price * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 1) then (web_sales.ws_net_paid_inc_tax * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 2) then (web_sales.ws_net_paid_inc_tax * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 3) then (web_sales.ws_net_paid_inc_tax * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 4) then (web_sales.ws_net_paid_inc_tax * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 5) then (web_sales.ws_net_paid_inc_tax * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 6) then (web_sales.ws_net_paid_inc_tax * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 7) then (web_sales.ws_net_paid_inc_tax * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 8) then (web_sales.ws_net_paid_inc_tax * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 9) then (web_sales.ws_net_paid_inc_tax * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 10) then (web_sales.ws_net_paid_inc_tax * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 11) then (web_sales.ws_net_paid_inc_tax * web_sales.ws_quantity) else 0 end)), sum((case when (date_dim.d_moy = 12) then (web_sales.ws_net_paid_inc_tax * web_sales.ws_quantity) else 0 end))  (cost=12..12 rows=0.00222 height=1) (actual time=0.0236..0.0236 rows=0 loops=1)
                        -> Sort: warehouse.w_warehouse_name, warehouse.w_warehouse_sq_ft, warehouse.w_city, warehouse.w_county, warehouse.w_state, warehouse.w_country  (cost=12..12 rows=0.00222 height=1) (actual time=0.0232..0.0232 rows=0 loops=1)
                            -> Inner hash join (web_sales.ws_sold_date_sk = date_dim.d_date_sk) (fill_ratio=0)  (cost=11.7..11.7 rows=0.00222 height=1) (actual time=0.0201..0.0201 rows=0 loops=1)
                                -> Filter: (date_dim.d_year = 2002)  (cost=0.961..0.961 rows=0.1 height=1) (actual time=0.0179..0.0179 rows=0 loops=1)
                                    -> Table scan on date_dim  (cost=0.903..0.903 rows=1 height=1) (actual time=0.0145..0.0169 rows=1 loops=1)
                                -> Hash
                                    -> Inner hash join (web_sales.ws_ship_mode_sk = ship_mode.sm_ship_mode_sk) (fill_ratio=0)  (cost=10.6..10.6 rows=0.0222 height=1) (never executed)
                                        -> Filter: (ship_mode.sm_carrier in ('DIAMOND','AIRBORNE'))  (cost=1.28..1.28 rows=0.2 height=1) (never executed)
                                            -> Table scan on ship_mode  (cost=1.23..1.23 rows=1 height=1) (never executed)
                                        -> Hash
                                            -> Nested loop inner join  (cost=9.15..9.15 rows=0.111 height=1) (never executed)
                                                -> Nested loop inner join  (cost=5.31..5.31 rows=1 height=1) (never executed)
                                                    -> Table scan on web_sales  (cost=0.885..0.885 rows=1 height=1) (never executed)
                                                    -> Single-row index lookup on warehouse using PRIMARY (w_warehouse_sk = web_sales.ws_warehouse_sk)  (cost=4.43..4.43 rows=1 height=1) (never executed)
                                                -> Filter: (time_dim.t_time between 49530 and <cache>((49530 + 28800)))  (cost=3.84..3.84 rows=0.111 height=1) (never executed)
                                                    -> Single-row index lookup on time_dim using PRIMARY (t_time_sk = web_sales.ws_sold_time_sk)  (cost=3.78..3.78 rows=1 height=1) (never executed)
                    -> Group aggregate: sum((case when (date_dim.d_moy = 1) then (catalog_sales.cs_ext_sales_price * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 2) then (catalog_sales.cs_ext_sales_price * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 3) then (catalog_sales.cs_ext_sales_price * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 4) then (catalog_sales.cs_ext_sales_price * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 5) then (catalog_sales.cs_ext_sales_price * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 6) then (catalog_sales.cs_ext_sales_price * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 7) then (catalog_sales.cs_ext_sales_price * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 8) then (catalog_sales.cs_ext_sales_price * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 9) then (catalog_sales.cs_ext_sales_price * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 10) then (catalog_sales.cs_ext_sales_price * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 11) then (catalog_sales.cs_ext_sales_price * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 12) then (catalog_sales.cs_ext_sales_price * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 1) then (catalog_sales.cs_net_paid_inc_ship_tax * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 2) then (catalog_sales.cs_net_paid_inc_ship_tax * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 3) then (catalog_sales.cs_net_paid_inc_ship_tax * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 4) then (catalog_sales.cs_net_paid_inc_ship_tax * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 5) then (catalog_sales.cs_net_paid_inc_ship_tax * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 6) then (catalog_sales.cs_net_paid_inc_ship_tax * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 7) then (catalog_sales.cs_net_paid_inc_ship_tax * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 8) then (catalog_sales.cs_net_paid_inc_ship_tax * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 9) then (catalog_sales.cs_net_paid_inc_ship_tax * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 10) then (catalog_sales.cs_net_paid_inc_ship_tax * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 11) then (catalog_sales.cs_net_paid_inc_ship_tax * catalog_sales.cs_quantity) else 0 end)), sum((case when (date_dim.d_moy = 12) then (catalog_sales.cs_net_paid_inc_ship_tax * catalog_sales.cs_quantity) else 0 end))  (cost=12..12 rows=0.00222 height=1) (actual time=0.00508..0.00508 rows=0 loops=1)
                        -> Sort: warehouse.w_warehouse_name, warehouse.w_warehouse_sq_ft, warehouse.w_city, warehouse.w_county, warehouse.w_state, warehouse.w_country  (cost=12..12 rows=0.00222 height=1) (actual time=0.00496..0.00496 rows=0 loops=1)
                            -> Inner hash join (catalog_sales.cs_sold_date_sk = date_dim.d_date_sk) (fill_ratio=0)  (cost=11.7..11.7 rows=0.00222 height=1) (actual time=0.00402..0.00402 rows=0 loops=1)
                                -> Filter: (date_dim.d_year = 2002)  (cost=0.961..0.961 rows=0.1 height=1) (actual time=0.00326..0.00326 rows=0 loops=1)
                                    -> Table scan on date_dim  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00268..0.00311 rows=1 loops=1)
                                -> Hash
                                    -> Inner hash join (catalog_sales.cs_ship_mode_sk = ship_mode.sm_ship_mode_sk) (fill_ratio=0)  (cost=10.6..10.6 rows=0.0222 height=1) (never executed)
                                        -> Filter: (ship_mode.sm_carrier in ('DIAMOND','AIRBORNE'))  (cost=1.28..1.28 rows=0.2 height=1) (never executed)
                                            -> Table scan on ship_mode  (cost=1.23..1.23 rows=1 height=1) (never executed)
                                        -> Hash
                                            -> Nested loop inner join  (cost=9.15..9.15 rows=0.111 height=1) (never executed)
                                                -> Nested loop inner join  (cost=5.31..5.31 rows=1 height=1) (never executed)
                                                    -> Table scan on catalog_sales  (cost=0.885..0.885 rows=1 height=1) (never executed)
                                                    -> Single-row index lookup on warehouse using PRIMARY (w_warehouse_sk = catalog_sales.cs_warehouse_sk)  (cost=4.43..4.43 rows=1 height=1) (never executed)
                                                -> Filter: (time_dim.t_time between 49530 and <cache>((49530 + 28800)))  (cost=3.84..3.84 rows=0.111 height=1) (never executed)
                                                    -> Single-row index lookup on time_dim using PRIMARY (t_time_sk = catalog_sales.cs_sold_time_sk)  (cost=3.78..3.78 rows=1 height=1) (never executed)
