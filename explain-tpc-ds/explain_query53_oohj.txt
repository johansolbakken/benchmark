Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 1238 bytes
EXPLAIN
-> Sort: tmp1.avg_quarterly_sales, tmp1.sum_sales, tmp1.i_manufact_id, limit input to 100 row(s) per chunk  (cost=208570..208570 rows=15.8 height=1) (actual time=0.0324..0.0324 rows=0 loops=1)
    -> Filter: ((case when (tmp1.avg_quarterly_sales > 0.000000) then (abs((tmp1.sum_sales - tmp1.avg_quarterly_sales)) / tmp1.avg_quarterly_sales) else NULL end) > 0.1)  (cost=208559..208563 rows=15.8 height=1) (actual time=0.0311..0.0311 rows=0 loops=1)
        -> Table scan on tmp1  (cost=208558..208562 rows=15.8 height=1) (actual time=0.0307..0.0307 rows=0 loops=1)
            -> Materialize  (cost=208558..208558 rows=15.8 height=1) (actual time=0.0306..0.0306 rows=0 loops=1)
                -> Window aggregate with buffering: avg(```sum(store_sales.ss_sales_price)```) OVER (PARTITION BY item.i_manufact_id )   (cost=208549..208553 rows=15.8 height=1) (actual time=0.0288..0.0288 rows=0 loops=1)
                    -> Sort: item.i_manufact_id  (cost=208549..208549 rows=15.8 height=1) (actual time=0.0282..0.0282 rows=0 loops=1)
                        -> Table scan on <temporary>  (cost=208539..208542 rows=15.8 height=1) (actual time=0.0262..0.0262 rows=0 loops=1)
                            -> Aggregate using temporary table  (cost=208539..208539 rows=15.8 height=1) (actual time=0.026..0.026 rows=0 loops=1)
                                -> Inner hash join (store_sales.ss_store_sk = store.s_store_sk)  (optimistic hash join, o_level=0.8, o_func=LINEAR, went_on_disk=false) (fill_ratio=4.76837e-06)  (cost=1447..146055 rows=68605 height=1) (actual time=0.0256..0.0256 rows=0 loops=1)
                                    -> Inner hash join (store_sales.ss_sold_date_sk = date_dim.d_date_sk)  (optimistic hash join, o_level=0.8, o_func=LINEAR, went_on_disk=false) (fill_ratio=0)  (cost=1430..122327 rows=68605 height=1) (actual time=0.00425..0.00425 rows=0 loops=1)
                                        -> Nested loop inner join  (cost=1427..84386 rows=137211 height=1) (never executed)
                                            -> Sort: item.i_manufact_id  (cost=1427..1427 rows=23.4 height=1) (never executed)
                                                -> Filter: (((item.i_category in ('Books','Children','Electronics')) and (item.i_class in ('personal','portable','reference','self-help')) and (item.i_brand in ('scholaramalgamalg #14','scholaramalgamalg #7','exportiunivamalg #9','scholaramalgamalg #9'))) or ((item.i_category in ('Women','Music','Men')) and (item.i_class in ('accessories','classical','fragrances','pants')) and (item.i_brand in ('amalgimporto #1','edu packscholar #1','exportiimporto #1','importoamalg #1'))))  (cost=60.4..1415 rows=23.4 height=1) (never executed)
                                                    -> Table scan on item  (cost=5.6..1401 rows=250 height=1) (never executed)
                                            -> Index lookup on store_sales using PRIMARY (ss_item_sk = item.i_item_sk)  (cost=0.605..3542 rows=5858 height=1) (never executed)
                                        -> Hash
                                            -> Filter: (date_dim.d_month_seq in (1212,<cache>((1212 + 1)),<cache>((1212 + 2)),<cache>((1212 + 3)),<cache>((1212 + 4)),<cache>((1212 + 5)),<cache>((1212 + 6)),<cache>((1212 + 7)),<cache>((1212 + 8)),<cache>((1212 + 9)),<cache>((1212 + 10)),<cache>((1212 + 11))))  (cost=0.961..0.961 rows=0.5 height=1) (actual time=0.00333..0.00333 rows=0 loops=1)
                                                -> Table scan on date_dim  (cost=0.903..0.903 rows=1 height=1) (actual time=0.0025..0.00292 rows=1 loops=1)
                                    -> Hash
                                        -> Table scan on store  (cost=6.71..13.4 rows=2 height=1) (actual time=0.0155..0.0174 rows=2 loops=1)
