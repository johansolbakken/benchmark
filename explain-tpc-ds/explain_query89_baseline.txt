Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 1135 bytes
EXPLAIN
-> Sort: (tmp1.sum_sales - tmp1.avg_monthly_sales), tmp1.s_store_name, limit input to 100 row(s) per chunk  (cost=248199..248199 rows=100 height=1) (actual time=0.0592..0.0592 rows=0 loops=1)
    -> Filter: ((case when (tmp1.avg_monthly_sales <> 0.000000) then (abs((tmp1.sum_sales - tmp1.avg_monthly_sales)) / tmp1.avg_monthly_sales) else NULL end) > 0.1)  (cost=247599..247827 rows=1017 height=1) (actual time=0.0566..0.0566 rows=0 loops=1)
        -> Table scan on tmp1  (cost=247540..247768 rows=1017 height=1) (actual time=0.0565..0.0565 rows=0 loops=1)
            -> Materialize  (cost=247540..247540 rows=1017 height=1) (actual time=0.0563..0.0563 rows=0 loops=1)
                -> Window aggregate with buffering: avg(`sum(store_sales.ss_sales_price)`) OVER (PARTITION BY item.i_category,item.i_brand,store.s_store_name,store.s_company_name )   (cost=246983..247217 rows=1017 height=1) (actual time=0.054..0.054 rows=0 loops=1)
                    -> Sort: item.i_category, item.i_brand, store.s_store_name, store.s_company_name  (cost=246983..246983 rows=1017 height=1) (actual time=0.0531..0.0531 rows=0 loops=1)
                        -> Stream results  (cost=238587..246304 rows=1017 height=1) (actual time=0.0524..0.0524 rows=0 loops=1)
                            -> Group aggregate: sum(store_sales.ss_sales_price), sum(store_sales.ss_sales_price)  (cost=238587..245750 rows=1017 height=1) (actual time=0.0523..0.0523 rows=0 loops=1)
                                -> Sort: item.i_category, item.i_class, item.i_brand, store.s_store_name, store.s_company_name, date_dim.d_moy  (cost=238580..238580 rows=25173 height=1) (actual time=0.052..0.052 rows=0 loops=1)
                                    -> Inner hash join (store_sales.ss_store_sk = store.s_store_sk) (fill_ratio=2.19345e-05)  (cost=26.4..218008 rows=25173 height=1) (actual time=0.0499..0.0499 rows=0 loops=1)
                                        -> Inner hash join (store_sales.ss_sold_date_sk = date_dim.d_date_sk) (fill_ratio=0)  (cost=9.42..209290 rows=25173 height=1) (actual time=0.027..0.027 rows=0 loops=1)
                                            -> Nested loop inner join  (cost=0.61..153606 rows=251734 height=1) (actual time=0.0231..0.0231 rows=1 loops=1)
                                                -> Filter: (((item.i_category in ('Home','Books','Electronics')) and (item.i_class in ('wallpaper','parenting','musical'))) or ((item.i_category in ('Shoes','Jewelry','Men')) and (item.i_class in ('womens','birdal','pants'))))  (cost=32.7..1404 rows=43 height=1) (actual time=0.0115..0.0115 rows=1 loops=1)
                                                    -> Table scan on item  (cost=5.56..1389 rows=250 height=1) (actual time=0.00879..0.00933 rows=5 loops=1)
                                                -> Index lookup on store_sales using PRIMARY (ss_item_sk = item.i_item_sk)  (cost=0.605..3542 rows=5858 height=1) (actual time=0.0114..0.0114 rows=1 loops=1)
                                            -> Hash
                                                -> Filter: (date_dim.d_year = 2000)  (cost=0.961..0.961 rows=0.1 height=1) (actual time=0.00308..0.00308 rows=0 loops=1)
                                                    -> Table scan on date_dim  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00229..0.00271 rows=1 loops=1)
                                        -> Hash
                                            -> Table scan on store  (cost=6.8..13.6 rows=2 height=1) (actual time=0.0149..0.017 rows=2 loops=1)
