Executing: ../mysql-server-build/build-release/bin/mysql -uroot --local-infile=1 --port=13000 --host=127.0.0.1 tpcds_s10 with input size: 2863 bytes
EXPLAIN
-> Sort: ranked.item_sk, ranked.d_date, limit input to 100 row(s) per chunk  (cost=2.92e+6..2.92e+6 rows=100 height=1) (actual time=0.324..0.324 rows=0 loops=1)
    -> Filter: (ranked.web_cumulative > ranked.store_cumulative)  (cost=2.91e+6..2.92e+6 rows=1651 height=1) (actual time=0.322..0.322 rows=0 loops=1)
        -> Table scan on ranked  (cost=2.91e+6..2.92e+6 rows=4955 height=1) (actual time=0.321..0.321 rows=0 loops=1)
            -> Materialize CTE ranked  (cost=2.91e+6..2.91e+6 rows=4955 height=1) (actual time=0.321..0.321 rows=0 loops=1)
                -> Window aggregate: max(combined.store_sales) OVER (PARTITION BY combined.item_sk ORDER BY combined.d_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)   (cost=2.91e+6..2.91e+6 rows=4955 height=1) (actual time=0.319..0.319 rows=0 loops=1)
                    -> Window aggregate: max(combined.web_sales) OVER (PARTITION BY combined.item_sk ORDER BY combined.d_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)   (cost=2.91e+6..2.91e+6 rows=4955 height=1) (actual time=0.319..0.319 rows=0 loops=1)
                        -> Sort: combined.item_sk, combined.d_date  (cost=2.91e+6..2.91e+6 rows=4955 height=1) (actual time=0.319..0.319 rows=0 loops=1)
                            -> Table scan on combined  (cost=2.91e+6..2.91e+6 rows=4955 height=1) (actual time=0.319..0.319 rows=0 loops=1)
                                -> Materialize union CTE combined  (cost=2.91e+6..2.91e+6 rows=4955 height=1) (actual time=0.319..0.319 rows=0 loops=1)
                                    -> Nested loop left join  (cost=1.44e+6..1.44e+6 rows=54.4 height=1) (actual time=0.0294..0.0294 rows=0 loops=1)
                                        -> Table scan on web  (cost=8.9..8.9 rows=0.111 height=1) (actual time=0.0292..0.0292 rows=0 loops=1)
                                            -> Materialize CTE web_v1 if needed  (cost=8.88..8.88 rows=0.111 height=1) (actual time=0.029..0.029 rows=0 loops=1)
                                                -> Window aggregate: sum(daily_web.daily_sales) OVER (PARTITION BY daily_web.item_sk ORDER BY daily_web.d_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)   (cost=5.86..5.86 rows=0.111 height=1) (actual time=0.0285..0.0285 rows=0 loops=1)
                                                    -> Sort: daily_web.item_sk, daily_web.d_date  (cost=5.83..5.83 rows=0.111 height=1) (actual time=0.0284..0.0284 rows=0 loops=1)
                                                        -> Table scan on daily_web  (cost=5.49..5.49 rows=0.111 height=1) (actual time=0.0278..0.0278 rows=0 loops=1)
                                                            -> Materialize CTE daily_web if needed  (cost=5.47..5.47 rows=0.111 height=1) (actual time=0.0276..0.0276 rows=0 loops=1)
                                                                -> Group aggregate: sum(ws.ws_sales_price)  (cost=2.44..2.44 rows=0.111 height=1) (actual time=0.0267..0.0267 rows=0 loops=1)
                                                                    -> Sort: ws.ws_item_sk, d.d_date  (cost=2.4..2.4 rows=0.111 height=1) (actual time=0.0265..0.0265 rows=0 loops=1)
                                                                        -> Inner hash join (ws.ws_sold_date_sk = d.d_date_sk) (fill_ratio=0)  (cost=2.05..2.05 rows=0.111 height=1) (actual time=0.0247..0.0247 rows=0 loops=1)
                                                                            -> Table scan on ws  (cost=0.7..0.7 rows=1 height=1) (actual time=0.0173..0.0173 rows=1 loops=1)
                                                                            -> Hash
                                                                                -> Filter: (d.d_month_seq between 1212 and <cache>((1212 + 11)))  (cost=0.961..0.961 rows=0.111 height=1) (actual time=0.00571..0.00571 rows=0 loops=1)
                                                                                    -> Table scan on d  (cost=0.903..0.903 rows=1 height=1) (actual time=0.00246..0.00454 rows=1 loops=1)
                                        -> Index lookup on store using <auto_key0> (item_sk = web.item_sk, d_date = web.d_date)  (cost=1.44e+6..1.44e+6 rows=490 height=1) (never executed)
                                            -> Materialize CTE store_v1 if needed (query plan printed elsewhere)  (cost=1.44e+6..1.44e+6 rows=49005 height=1) (never executed)
                                    -> Filter: (web.item_sk is null)  (cost=1.44e+6..1.47e+6 rows=4901 height=1) (actual time=0.288..0.288 rows=0 loops=1)
                                        -> Left hash join (web.item_sk = store.item_sk), (web.d_date = store.d_date) (fill_ratio=0)  (cost=1.44e+6..1.46e+6 rows=49005 height=1) (actual time=0.288..0.288 rows=0 loops=1)
                                            -> Table scan on store  (cost=1.44e+6..1.45e+6 rows=49005 height=1) (actual time=0.288..0.288 rows=0 loops=1)
                                                -> Materialize CTE store_v1 if needed  (cost=1.44e+6..1.44e+6 rows=49005 height=1) (actual time=0.288..0.288 rows=0 loops=1)
                                                    -> Window aggregate: sum(daily_store.daily_sales) OVER (PARTITION BY daily_store.item_sk ORDER BY daily_store.d_date ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)   (cost=1.42e+6..1.43e+6 rows=49005 height=1) (actual time=0.287..0.287 rows=0 loops=1)
                                                        -> Sort: daily_store.item_sk, daily_store.d_date  (cost=1.42e+6..1.42e+6 rows=49005 height=1) (actual time=0.287..0.287 rows=0 loops=1)
                                                            -> Table scan on daily_store  (cost=1.37e+6..1.37e+6 rows=49005 height=1) (actual time=0.286..0.286 rows=0 loops=1)
                                                                -> Materialize CTE daily_store if needed  (cost=1.37e+6..1.37e+6 rows=49005 height=1) (actual time=0.286..0.286 rows=0 loops=1)
                                                                    -> Table scan on <temporary>  (cost=1.35e+6..1.36e+6 rows=49005 height=1) (actual time=0.285..0.285 rows=0 loops=1)
                                                                        -> Aggregate using temporary table  (cost=1.35e+6..1.35e+6 rows=49005 height=1) (actual time=0.285..0.285 rows=0 loops=1)
                                                                            -> Inner hash join (ss.ss_sold_date_sk = d.d_date_sk) (fill_ratio=0)  (cost=8.44..1.19e+6 rows=162698 height=1) (actual time=0.285..0.285 rows=0 loops=1)
                                                                                -> Table scan on ss  (cost=0.59..863808 rows=1.46e+6 height=1) (actual time=0.282..0.282 rows=1 loops=1)
                                                                                -> Hash
                                                                                    -> Filter: (d.d_month_seq between 1212 and <cache>((1212 + 11)))  (cost=0.961..0.961 rows=0.111 height=1) (actual time=0.00208..0.00208 rows=0 loops=1)
                                                                                        -> Table scan on d  (cost=0.903..0.903 rows=1 height=1) (actual time=0.0015..0.00179 rows=1 loops=1)
                                            -> Hash
                                                -> Table scan on web  (cost=8.9..8.9 rows=0.111 height=1) (never executed)
                                                    -> Materialize CTE web_v1 if needed (query plan printed elsewhere)  (cost=8.88..8.88 rows=0.111 height=1) (never executed)
