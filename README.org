#+title: JOB for Optimistic Order-Preserving Hash Join (OOHJ)

This repository is part of our Master's thesis, focused on benchmarking modifications made to MySQL. The project specifically evaluates the performance of our newly developed operator, Optimistic Order-Preserving Hash Join (OOHJ), using the Join Order Benchmark (JOB).

* Requirements

#+begin_src
brew install ruby
gem install pq_query
brew install hyperfine
#+END_SRC

* Quick start

- Requires MySQL running and config.yaml set up pointing at a mysql executable and server.

#+begin_src
ruby download.rb                                          # downloads csv files with JOB dataset
ruby benchmark.rb --setup                                 # loads schema and creates indexes
ruby benchmark.rb --feed                                  # feeds the downloaded dataset folder into MySQL
ruby benchmark.rb --prepare-mysql                         # sets up a consistent environment in MySQL for testing
ruby benchmark.rb --run ./job/6a.sql --analyze            # EXPLAIN ANALYZE on query 6a
#+end_src


* Commands

** Clone the Repository

Begin by cloning the repository to your local machine:

#+begin_src shell
git clone https://github.com/johansolbakken/benchmark
cd benchmark
#+end_src

** Download the Dataset

Use the provided script to download the dataset required for benchmarking:

#+begin_src shell
ruby download.rb
#+end_src

This will create a `dataset` folder containing the necessary data.

** Start MySQL

1. Download and build the MySQL source code.
2. Start MySQL using MySQL Test Run (MTR), MySQL's testing script:

First-time setup:

#+begin_src shell
cd build # Navigate to the MySQL build folder
./mysql-test/mtr --start
#+end_src

For subsequent runs, use:

#+begin_src shell
./mysql-test/mtr --start-dirty
#+end_src

3. Configure the path to the MySQL binary in `config.yaml` (e.g., `build/bin/mysql`).

** config.yaml

Copy the `config.yaml.example` file to `config.yaml` and update it with the path to your MySQL binary.

It is important that /path/ points to a mysql client executable.

** Setup the Database

Then, initialize the database by creating tables and indexes:

#+begin_src shell
ruby benchmark.rb --setup
#+end_src

** Load the Data

Feed the downloaded dataset into the database:

#+begin_src shell
ruby benchmark.rb --feed
#+end_src

** Prepare MySQL environment

This command sets the environment to ensure the environment is the same for every test.

#+begin_src shell
ruby benchmark.rb --prepare-mysql
#+end_src

** Run SQL Queries

To run SQL queries, use the following commands:

- Execute a query:
#+begin_src shell
ruby benchmark.rb --run ./job/1a.sql
#+end_src

- Execute a query with EXPLAIN ANALYZE to analyze execution:
#+begin_src shell
ruby benchmark.rb --run ./job/1a.sql --analyze
#+end_src

- Execute a query with EXPLAIN FORMAT=TREE to analyze plan:
#+begin_src shell
ruby benchmark.rb --run ./job/1a.sql --tree
#+end_src

* Cleanup

To clean up the database and remove generated artifacts, run:

#+begin_src shell
ruby cleanup.rb
#+end_src

* TPC-DS
